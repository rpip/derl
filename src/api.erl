%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.8.0
-module(api).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_Operation.DropOp'/1, 'enum_value_by_symbol_Operation.DropOp'/1]).
-export(['enum_symbol_by_value_LinRead.Sequencing'/1, 'enum_value_by_symbol_LinRead.Sequencing'/1]).
-export(['enum_symbol_by_value_Facet.ValType'/1, 'enum_value_by_symbol_Facet.ValType'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("api.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'Operation.DropOp'() :: 'NONE' | 'ALL' | 'DATA' | 'ATTR' | 'TYPE'.
-type 'LinRead.Sequencing'() :: 'CLIENT_SIDE' | 'SERVER_SIDE'.
-type 'Facet.ValType'() :: 'STRING' | 'INT' | 'FLOAT' | 'BOOL' | 'DATETIME'.
-export_type(['Operation.DropOp'/0, 'LinRead.Sequencing'/0, 'Facet.ValType'/0]).

%% message types
-type 'Request'() :: #'Request'{}.

-type 'Response'() :: #'Response'{}.

-type 'Assigned'() :: #'Assigned'{}.

-type 'Mutation'() :: #'Mutation'{}.

-type 'Operation'() :: #'Operation'{}.

-type 'Payload'() :: #'Payload'{}.

-type 'TxnContext'() :: #'TxnContext'{}.

-type 'Check'() :: #'Check'{}.

-type 'Version'() :: #'Version'{}.

-type 'LinRead'() :: #'LinRead'{}.

-type 'Latency'() :: #'Latency'{}.

-type 'NQuad'() :: #'NQuad'{}.

-type 'Value'() :: #'Value'{}.

-type 'Facet'() :: #'Facet'{}.

-type 'SchemaNode'() :: #'SchemaNode'{}.

-type 'LoginRequest'() :: #'LoginRequest'{}.

-type 'Jwt'() :: #'Jwt'{}.

-export_type(['Request'/0, 'Response'/0, 'Assigned'/0, 'Mutation'/0, 'Operation'/0, 'Payload'/0, 'TxnContext'/0, 'Check'/0, 'Version'/0, 'LinRead'/0, 'Latency'/0, 'NQuad'/0, 'Value'/0, 'Facet'/0, 'SchemaNode'/0, 'LoginRequest'/0, 'Jwt'/0]).

-record('map<uint32,uint64>',{key, value}).
-record('map<string,string>',{key, value}).
-spec encode_msg(#'Request'{} | #'Response'{} | #'Assigned'{} | #'Mutation'{} | #'Operation'{} | #'Payload'{} | #'TxnContext'{} | #'Check'{} | #'Version'{} | #'LinRead'{} | #'Latency'{} | #'NQuad'{} | #'Value'{} | #'Facet'{} | #'SchemaNode'{} | #'LoginRequest'{} | #'Jwt'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'Request'{} | #'Response'{} | #'Assigned'{} | #'Mutation'{} | #'Operation'{} | #'Payload'{} | #'TxnContext'{} | #'Check'{} | #'Version'{} | #'LinRead'{} | #'Latency'{} | #'NQuad'{} | #'Value'{} | #'Facet'{} | #'SchemaNode'{} | #'LoginRequest'{} | #'Jwt'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'Request'{} | #'Response'{} | #'Assigned'{} | #'Mutation'{} | #'Operation'{} | #'Payload'{} | #'TxnContext'{} | #'Check'{} | #'Version'{} | #'LinRead'{} | #'Latency'{} | #'NQuad'{} | #'Value'{} | #'Facet'{} | #'SchemaNode'{} | #'LoginRequest'{} | #'Jwt'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Request' ->
	  encode_msg_Request(id(Msg, TrUserData), TrUserData);
      'Response' ->
	  encode_msg_Response(id(Msg, TrUserData), TrUserData);
      'Assigned' ->
	  encode_msg_Assigned(id(Msg, TrUserData), TrUserData);
      'Mutation' ->
	  encode_msg_Mutation(id(Msg, TrUserData), TrUserData);
      'Operation' ->
	  encode_msg_Operation(id(Msg, TrUserData), TrUserData);
      'Payload' ->
	  encode_msg_Payload(id(Msg, TrUserData), TrUserData);
      'TxnContext' ->
	  encode_msg_TxnContext(id(Msg, TrUserData), TrUserData);
      'Check' ->
	  encode_msg_Check(id(Msg, TrUserData), TrUserData);
      'Version' ->
	  encode_msg_Version(id(Msg, TrUserData), TrUserData);
      'LinRead' ->
	  encode_msg_LinRead(id(Msg, TrUserData), TrUserData);
      'Latency' ->
	  encode_msg_Latency(id(Msg, TrUserData), TrUserData);
      'NQuad' ->
	  encode_msg_NQuad(id(Msg, TrUserData), TrUserData);
      'Value' ->
	  encode_msg_Value(id(Msg, TrUserData), TrUserData);
      'Facet' ->
	  encode_msg_Facet(id(Msg, TrUserData), TrUserData);
      'SchemaNode' ->
	  encode_msg_SchemaNode(id(Msg, TrUserData), TrUserData);
      'LoginRequest' ->
	  encode_msg_LoginRequest(id(Msg, TrUserData),
				  TrUserData);
      'Jwt' -> encode_msg_Jwt(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Request(Msg, TrUserData) ->
    encode_msg_Request(Msg, <<>>, TrUserData).


encode_msg_Request(#'Request'{query = F1, vars = F2,
			      start_ts = F3, lin_read = F4, read_only = F5,
			      best_effort = F6},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true -> e_field_Request_vars(TrF2, B1, TrUserData)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 104>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true ->
			 e_mfield_Request_lin_read(TrF4, <<B3/binary, 114>>,
						   TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= false -> B4;
		     true ->
			 e_type_bool(TrF5, <<B4/binary, 120>>, TrUserData)
		  end
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     if TrF6 =:= false -> B5;
		true ->
		    e_type_bool(TrF6, <<B5/binary, 128, 1>>, TrUserData)
	     end
	   end
    end.

encode_msg_Response(Msg, TrUserData) ->
    encode_msg_Response(Msg, <<>>, TrUserData).


encode_msg_Response(#'Response'{json = F1, schema = F2,
				txn = F3, latency = F4},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true -> e_field_Response_schema(TrF2, B1, TrUserData)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 e_mfield_Response_txn(TrF3, <<B2/binary, 26>>,
					       TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= undefined -> B3;
		true ->
		    e_mfield_Response_latency(TrF4, <<B3/binary, 98>>,
					      TrUserData)
	     end
	   end
    end.

encode_msg_Assigned(Msg, TrUserData) ->
    encode_msg_Assigned(Msg, <<>>, TrUserData).


encode_msg_Assigned(#'Assigned'{uids = F1, context = F2,
				latency = F3},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_Assigned_uids(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 e_mfield_Assigned_context(TrF2, <<B1/binary, 18>>,
						   TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= undefined -> B2;
		true ->
		    e_mfield_Assigned_latency(TrF3, <<B2/binary, 98>>,
					      TrUserData)
	     end
	   end
    end.

encode_msg_Mutation(Msg, TrUserData) ->
    encode_msg_Mutation(Msg, <<>>, TrUserData).


encode_msg_Mutation(#'Mutation'{set_json = F1,
				delete_json = F2, set_nquads = F3,
				del_nquads = F4, query = F5, set = F6, del = F7,
				start_ts = F8, commit_now = F9,
				ignore_index_conflict = F10},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case iolist_size(TrF3) of
		    0 -> B2;
		    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case iolist_size(TrF4) of
		    0 -> B3;
		    _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		  end
		end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true -> e_field_Mutation_set(TrF6, B5, TrUserData)
	   end
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   if TrF7 == [] -> B6;
	      true -> e_field_Mutation_del(TrF7, B6, TrUserData)
	   end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0 -> B7;
		     true -> e_varint(TrF8, <<B7/binary, 104>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= false -> B8;
		     true ->
			 e_type_bool(TrF9, <<B8/binary, 112>>, TrUserData)
		  end
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     if TrF10 =:= false -> B9;
		true ->
		    e_type_bool(TrF10, <<B9/binary, 120>>, TrUserData)
	     end
	   end
    end.

encode_msg_Operation(Msg, TrUserData) ->
    encode_msg_Operation(Msg, <<>>, TrUserData).


encode_msg_Operation(#'Operation'{schema = F1,
				  drop_attr = F2, drop_all = F3, drop_op = F4,
				  drop_value = F5},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 'NONE'; TrF4 =:= 0 -> B3;
		     true ->
			 'e_enum_Operation.DropOp'(TrF4, <<B3/binary, 32>>,
						   TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case is_empty_string(TrF5) of
	       true -> B4;
	       false ->
		   e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	     end
	   end
    end.

encode_msg_Payload(Msg, TrUserData) ->
    encode_msg_Payload(Msg, <<>>, TrUserData).


encode_msg_Payload(#'Payload'{'Data' = F1}, Bin,
		   TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

encode_msg_TxnContext(Msg, TrUserData) ->
    encode_msg_TxnContext(Msg, <<>>, TrUserData).


encode_msg_TxnContext(#'TxnContext'{start_ts = F1,
				    commit_ts = F2, aborted = F3, keys = F4,
				    preds = F5, lin_read = F6},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true -> e_field_TxnContext_keys(TrF4, B3, TrUserData)
	   end
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true -> e_field_TxnContext_preds(TrF5, B4, TrUserData)
	   end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     if TrF6 =:= undefined -> B5;
		true ->
		    e_mfield_TxnContext_lin_read(TrF6, <<B5/binary, 106>>,
						 TrUserData)
	     end
	   end
    end.

encode_msg_Check(_Msg, _TrUserData) -> <<>>.

encode_msg_Version(Msg, TrUserData) ->
    encode_msg_Version(Msg, <<>>, TrUserData).


encode_msg_Version(#'Version'{tag = F1}, Bin,
		   TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

encode_msg_LinRead(Msg, TrUserData) ->
    encode_msg_LinRead(Msg, <<>>, TrUserData).


encode_msg_LinRead(#'LinRead'{ids = F1,
			      sequencing = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_LinRead_ids(TrF1, Bin, TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 'CLIENT_SIDE'; TrF2 =:= 0 -> B1;
		true ->
		    'e_enum_LinRead.Sequencing'(TrF2, <<B1/binary, 16>>,
						TrUserData)
	     end
	   end
    end.

encode_msg_Latency(Msg, TrUserData) ->
    encode_msg_Latency(Msg, <<>>, TrUserData).


encode_msg_Latency(#'Latency'{parsing_ns = F1,
			      processing_ns = F2, encoding_ns = F3},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

encode_msg_NQuad(Msg, TrUserData) ->
    encode_msg_NQuad(Msg, <<>>, TrUserData).


encode_msg_NQuad(#'NQuad'{subject = F1, predicate = F2,
			  object_id = F3, object_value = F4, label = F5,
			  lang = F6, facets = F7},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true ->
			 e_mfield_NQuad_object_value(TrF4, <<B3/binary, 34>>,
						     TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case is_empty_string(TrF6) of
		    true -> B5;
		    false ->
			e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      if TrF7 == [] -> B6;
	 true -> e_field_NQuad_facets(TrF7, B6, TrUserData)
      end
    end.

encode_msg_Value(Msg, TrUserData) ->
    encode_msg_Value(Msg, <<>>, TrUserData).


encode_msg_Value(#'Value'{val = F1}, Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {default_val, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_string(TrTF1, <<Bin/binary, 10>>, TrUserData)
		 end;
	     {bytes_val, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_bytes(TrTF1, <<Bin/binary, 18>>, TrUserData)
		 end;
	     {int_val, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_int64(TrTF1, <<Bin/binary, 24>>, TrUserData)
		 end;
	     {bool_val, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_bool(TrTF1, <<Bin/binary, 32>>, TrUserData)
		 end;
	     {str_val, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_string(TrTF1, <<Bin/binary, 42>>, TrUserData)
		 end;
	     {double_val, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_double(TrTF1, <<Bin/binary, 49>>, TrUserData)
		 end;
	     {geo_val, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_bytes(TrTF1, <<Bin/binary, 58>>, TrUserData)
		 end;
	     {date_val, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_bytes(TrTF1, <<Bin/binary, 66>>, TrUserData)
		 end;
	     {datetime_val, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_bytes(TrTF1, <<Bin/binary, 74>>, TrUserData)
		 end;
	     {password_val, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_string(TrTF1, <<Bin/binary, 82>>, TrUserData)
		 end;
	     {uid_val, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_varint(TrTF1, <<Bin/binary, 88>>, TrUserData)
		 end
	   end
    end.

encode_msg_Facet(Msg, TrUserData) ->
    encode_msg_Facet(Msg, <<>>, TrUserData).


encode_msg_Facet(#'Facet'{key = F1, value = F2,
			  val_type = F3, tokens = F4, alias = F5},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 'STRING'; TrF3 =:= 0 -> B2;
		     true ->
			 'e_enum_Facet.ValType'(TrF3, <<B2/binary, 24>>,
						TrUserData)
		  end
		end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true -> e_field_Facet_tokens(TrF4, B3, TrUserData)
	   end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case is_empty_string(TrF5) of
	       true -> B4;
	       false ->
		   e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	     end
	   end
    end.

encode_msg_SchemaNode(Msg, TrUserData) ->
    encode_msg_SchemaNode(Msg, <<>>, TrUserData).


encode_msg_SchemaNode(#'SchemaNode'{predicate = F1,
				    type = F2, index = F3, tokenizer = F4,
				    reverse = F5, count = F6, list = F7,
				    upsert = F8, lang = F9},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_SchemaNode_tokenizer(TrF4, B3, TrUserData)
	   end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= false -> B4;
		     true -> e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= false -> B5;
		     true -> e_type_bool(TrF6, <<B5/binary, 48>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= false -> B6;
		     true -> e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= false -> B7;
		     true -> e_type_bool(TrF8, <<B7/binary, 64>>, TrUserData)
		  end
		end
	 end,
    if F9 == undefined -> B8;
       true ->
	   begin
	     TrF9 = id(F9, TrUserData),
	     if TrF9 =:= false -> B8;
		true -> e_type_bool(TrF9, <<B8/binary, 72>>, TrUserData)
	     end
	   end
    end.

encode_msg_LoginRequest(Msg, TrUserData) ->
    encode_msg_LoginRequest(Msg, <<>>, TrUserData).


encode_msg_LoginRequest(#'LoginRequest'{userid = F1,
					password = F2, refresh_token = F3},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false ->
		   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	     end
	   end
    end.

encode_msg_Jwt(Msg, TrUserData) ->
    encode_msg_Jwt(Msg, <<>>, TrUserData).


encode_msg_Jwt(#'Jwt'{access_jwt = F1,
		      refresh_jwt = F2},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

e_mfield_Request_vars(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Request_vars([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_Request_vars('tr_encode_Request.vars[x]'(Elem,
							  TrUserData),
			      Bin2, TrUserData),
    e_field_Request_vars(Rest, Bin3, TrUserData);
e_field_Request_vars([], Bin, _TrUserData) -> Bin.

e_mfield_Request_lin_read(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LinRead(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_schema(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_SchemaNode(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Response_schema([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_Response_schema(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_Response_schema(Rest, Bin3, TrUserData);
e_field_Response_schema([], Bin, _TrUserData) -> Bin.

e_mfield_Response_txn(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TxnContext(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_latency(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Latency(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Assigned_uids(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Assigned_uids([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_Assigned_uids('tr_encode_Assigned.uids[x]'(Elem,
							    TrUserData),
			       Bin2, TrUserData),
    e_field_Assigned_uids(Rest, Bin3, TrUserData);
e_field_Assigned_uids([], Bin, _TrUserData) -> Bin.

e_mfield_Assigned_context(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TxnContext(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Assigned_latency(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Latency(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Mutation_set(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_NQuad(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Mutation_set([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = e_mfield_Mutation_set(id(Elem, TrUserData), Bin2,
				 TrUserData),
    e_field_Mutation_set(Rest, Bin3, TrUserData);
e_field_Mutation_set([], Bin, _TrUserData) -> Bin.

e_mfield_Mutation_del(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_NQuad(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Mutation_del([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 90>>,
    Bin3 = e_mfield_Mutation_del(id(Elem, TrUserData), Bin2,
				 TrUserData),
    e_field_Mutation_del(Rest, Bin3, TrUserData);
e_field_Mutation_del([], Bin, _TrUserData) -> Bin.

e_field_TxnContext_keys([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_TxnContext_keys(Rest, Bin3, TrUserData);
e_field_TxnContext_keys([], Bin, _TrUserData) -> Bin.

e_field_TxnContext_preds([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_TxnContext_preds(Rest, Bin3, TrUserData);
e_field_TxnContext_preds([], Bin, _TrUserData) -> Bin.

e_mfield_TxnContext_lin_read(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LinRead(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LinRead_ids(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<uint32,uint64>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_LinRead_ids([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_LinRead_ids('tr_encode_LinRead.ids[x]'(Elem,
							TrUserData),
			     Bin2, TrUserData),
    e_field_LinRead_ids(Rest, Bin3, TrUserData);
e_field_LinRead_ids([], Bin, _TrUserData) -> Bin.

e_mfield_NQuad_object_value(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_NQuad_facets(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Facet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_NQuad_facets([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_mfield_NQuad_facets(id(Elem, TrUserData), Bin2,
				 TrUserData),
    e_field_NQuad_facets(Rest, Bin3, TrUserData);
e_field_NQuad_facets([], Bin, _TrUserData) -> Bin.

e_field_Facet_tokens([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_Facet_tokens(Rest, Bin3, TrUserData);
e_field_Facet_tokens([], Bin, _TrUserData) -> Bin.

e_field_SchemaNode_tokenizer([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_SchemaNode_tokenizer(Rest, Bin3, TrUserData);
e_field_SchemaNode_tokenizer([], Bin, _TrUserData) ->
    Bin.

'encode_msg_map<uint32,uint64>'(#'map<uint32,uint64>'{key
							  = F1,
						      value = F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

'encode_msg_map<string,string>'(#'map<string,string>'{key
							  = F1,
						      value = F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'e_enum_Operation.DropOp'('NONE', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Operation.DropOp'('ALL', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Operation.DropOp'('DATA', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_Operation.DropOp'('ATTR', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_Operation.DropOp'('TYPE', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_Operation.DropOp'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_LinRead.Sequencing'('CLIENT_SIDE', Bin,
			    _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_LinRead.Sequencing'('SERVER_SIDE', Bin,
			    _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_LinRead.Sequencing'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Facet.ValType'('STRING', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Facet.ValType'('INT', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Facet.ValType'('FLOAT', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_Facet.ValType'('BOOL', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_Facet.ValType'('DATETIME', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_Facet.ValType'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Request', Bin, TrUserData) ->
    id(decode_msg_Request(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Response', Bin, TrUserData) ->
    id(decode_msg_Response(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Assigned', Bin, TrUserData) ->
    id(decode_msg_Assigned(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Mutation', Bin, TrUserData) ->
    id(decode_msg_Mutation(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Operation', Bin, TrUserData) ->
    id(decode_msg_Operation(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Payload', Bin, TrUserData) ->
    id(decode_msg_Payload(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TxnContext', Bin, TrUserData) ->
    id(decode_msg_TxnContext(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Check', Bin, TrUserData) ->
    id(decode_msg_Check(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Version', Bin, TrUserData) ->
    id(decode_msg_Version(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LinRead', Bin, TrUserData) ->
    id(decode_msg_LinRead(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Latency', Bin, TrUserData) ->
    id(decode_msg_Latency(Bin, TrUserData), TrUserData);
decode_msg_2_doit('NQuad', Bin, TrUserData) ->
    id(decode_msg_NQuad(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Value', Bin, TrUserData) ->
    id(decode_msg_Value(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Facet', Bin, TrUserData) ->
    id(decode_msg_Facet(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SchemaNode', Bin, TrUserData) ->
    id(decode_msg_SchemaNode(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LoginRequest', Bin, TrUserData) ->
    id(decode_msg_LoginRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Jwt', Bin, TrUserData) ->
    id(decode_msg_Jwt(Bin, TrUserData), TrUserData).



decode_msg_Request(Bin, TrUserData) ->
    dfp_read_field_def_Request(Bin, 0, 0,
			       id([], TrUserData),
			       'tr_decode_init_default_Request.vars'([],
								     TrUserData),
			       id(0, TrUserData), id(undefined, TrUserData),
			       id(false, TrUserData), id(false, TrUserData),
			       TrUserData).

dfp_read_field_def_Request(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Request_query(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Request(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Request_vars(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Request(<<104, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Request_start_ts(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Request(<<114, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Request_lin_read(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Request(<<120, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Request_read_only(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Request(<<128, 1, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    d_field_Request_best_effort(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Request(<<>>, 0, 0, F@_1, R1, F@_3,
			   F@_4, F@_5, F@_6, TrUserData) ->
    #'Request'{query = F@_1,
	       vars =
		   'tr_decode_repeated_finalize_Request.vars'(R1,
							      TrUserData),
	       start_ts = F@_3, lin_read = F@_4, read_only = F@_5,
	       best_effort = F@_6};
dfp_read_field_def_Request(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_Request(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_Request(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Request(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_Request(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Request_query(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, TrUserData);
      18 ->
	  d_field_Request_vars(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, TrUserData);
      104 ->
	  d_field_Request_start_ts(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, TrUserData);
      114 ->
	  d_field_Request_lin_read(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, TrUserData);
      120 ->
	  d_field_Request_read_only(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, TrUserData);
      128 ->
	  d_field_Request_best_effort(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_Request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_Request(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6,
					      TrUserData);
	    3 ->
		skip_group_Request(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_Request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_Request(<<>>, 0, 0, F@_1, R1, F@_3,
			  F@_4, F@_5, F@_6, TrUserData) ->
    #'Request'{query = F@_1,
	       vars =
		   'tr_decode_repeated_finalize_Request.vars'(R1,
							      TrUserData),
	       start_ts = F@_3, lin_read = F@_4, read_only = F@_5,
	       best_effort = F@_6}.

d_field_Request_query(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_Request_query(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Request_query(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_Request_vars(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_Request_vars(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Request_vars(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, Prev, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0, F@_1,
			       'tr_decode_repeated_add_elem_Request.vars'(NewFValue,
									  Prev,
									  TrUserData),
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_Request_start_ts(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_Request_start_ts(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Request_start_ts(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_Request_lin_read(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_Request_lin_read(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Request_lin_read(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_LinRead(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       F@_3,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_LinRead(Prev, NewFValue,
							TrUserData)
			       end,
			       F@_5, F@_6, TrUserData).

d_field_Request_read_only(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_Request_read_only(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Request_read_only(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_Request_best_effort(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData)
    when N < 57 ->
    d_field_Request_best_effort(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Request_best_effort(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
			    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_Request(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_Request(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, TrUserData);
skip_varint_Request(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_Request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData)
    when N < 57 ->
    skip_length_delimited_Request(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, TrUserData);
skip_length_delimited_Request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Request(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_Request(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Request(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_Request(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_Request(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_Response(Bin, TrUserData) ->
    dfp_read_field_def_Response(Bin, 0, 0,
				id(<<>>, TrUserData), id([], TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Response(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Response_json(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_Response(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Response_schema(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_Response(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Response_txn(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_Response(<<98, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Response_latency(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, TrUserData);
dfp_read_field_def_Response(<<>>, 0, 0, F@_1, R1, F@_3,
			    F@_4, TrUserData) ->
    #'Response'{json = F@_1,
		schema = lists_reverse(R1, TrUserData), txn = F@_3,
		latency = F@_4};
dfp_read_field_def_Response(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, TrUserData) ->
    dg_read_field_def_Response(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Response_json(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      18 ->
	  d_field_Response_schema(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      26 ->
	  d_field_Response_txn(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      98 ->
	  d_field_Response_latency(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Response(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
	    1 ->
		skip_64_Response(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData);
	    2 ->
		skip_length_delimited_Response(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_Response(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_Response(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData)
	  end
    end;
dg_read_field_def_Response(<<>>, 0, 0, F@_1, R1, F@_3,
			   F@_4, TrUserData) ->
    #'Response'{json = F@_1,
		schema = lists_reverse(R1, TrUserData), txn = F@_3,
		latency = F@_4}.

d_field_Response_json(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Response_json(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_Response_json(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, TrUserData).

d_field_Response_schema(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Response_schema(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Response_schema(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_SchemaNode(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0, F@_1,
				cons(NewFValue, Prev, TrUserData), F@_3, F@_4,
				TrUserData).

d_field_Response_txn(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Response_txn(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_Response_txn(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_TxnContext(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0, F@_1, F@_2,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_TxnContext(Prev, NewFValue,
							    TrUserData)
				end,
				F@_4, TrUserData).

d_field_Response_latency(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Response_latency(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Response_latency(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Latency(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0, F@_1, F@_2,
				F@_3,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_Latency(Prev, NewFValue,
							 TrUserData)
				end,
				TrUserData).

skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_Response(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_length_delimited_Response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Response(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
skip_length_delimited_Response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_group_Response(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Response(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

decode_msg_Assigned(Bin, TrUserData) ->
    dfp_read_field_def_Assigned(Bin, 0, 0,
				'tr_decode_init_default_Assigned.uids'([],
								       TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Assigned(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Assigned_uids(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_Assigned(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Assigned_context(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_Assigned(<<98, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Assigned_latency(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_Assigned(<<>>, 0, 0, R1, F@_2, F@_3,
			    TrUserData) ->
    #'Assigned'{uids =
		    'tr_decode_repeated_finalize_Assigned.uids'(R1,
								TrUserData),
		context = F@_2, latency = F@_3};
dfp_read_field_def_Assigned(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_Assigned(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_Assigned(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Assigned(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Assigned(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Assigned_uids(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      18 ->
	  d_field_Assigned_context(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      98 ->
	  d_field_Assigned_latency(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Assigned(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_Assigned(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_Assigned(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_Assigned(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_Assigned(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_Assigned(<<>>, 0, 0, R1, F@_2, F@_3,
			   TrUserData) ->
    #'Assigned'{uids =
		    'tr_decode_repeated_finalize_Assigned.uids'(R1,
								TrUserData),
		context = F@_2, latency = F@_3}.

d_field_Assigned_uids(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Assigned_uids(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_Assigned_uids(<<0:1, X:7, Rest/binary>>, N, Acc,
		      Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Assigned(RestF, 0, 0,
				'tr_decode_repeated_add_elem_Assigned.uids'(NewFValue,
									    Prev,
									    TrUserData),
				F@_2, F@_3, TrUserData).

d_field_Assigned_context(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Assigned_context(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_Assigned_context(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_TxnContext(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Assigned(RestF, 0, 0, F@_1,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_TxnContext(Prev, NewFValue,
							    TrUserData)
				end,
				F@_3, TrUserData).

d_field_Assigned_latency(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Assigned_latency(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_Assigned_latency(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Latency(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Assigned(RestF, 0, 0, F@_1, F@_2,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_Latency(Prev, NewFValue,
							 TrUserData)
				end,
				TrUserData).

skip_varint_Assigned(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Assigned(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_Assigned(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Assigned(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_Assigned(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Assigned(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Assigned(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Assigned(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_Assigned(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Assigned(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_Assigned(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Assigned(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_Assigned(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Assigned(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

decode_msg_Mutation(Bin, TrUserData) ->
    dfp_read_field_def_Mutation(Bin, 0, 0,
				id(<<>>, TrUserData), id(<<>>, TrUserData),
				id(<<>>, TrUserData), id(<<>>, TrUserData),
				id([], TrUserData), id([], TrUserData),
				id([], TrUserData), id(0, TrUserData),
				id(false, TrUserData), id(false, TrUserData),
				TrUserData).

dfp_read_field_def_Mutation(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_Mutation_set_json(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData);
dfp_read_field_def_Mutation(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_Mutation_delete_json(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, TrUserData);
dfp_read_field_def_Mutation(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_Mutation_set_nquads(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData);
dfp_read_field_def_Mutation(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_Mutation_del_nquads(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData);
dfp_read_field_def_Mutation(<<42, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_Mutation_query(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   TrUserData);
dfp_read_field_def_Mutation(<<82, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_Mutation_set(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Mutation(<<90, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_Mutation_del(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Mutation(<<104, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_Mutation_start_ts(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData);
dfp_read_field_def_Mutation(<<112, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_Mutation_commit_now(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData);
dfp_read_field_def_Mutation(<<120, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_Mutation_ignore_index_conflict(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Mutation(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, R1, R2, F@_8, F@_9, F@_10,
			    TrUserData) ->
    #'Mutation'{set_json = F@_1, delete_json = F@_2,
		set_nquads = F@_3, del_nquads = F@_4, query = F@_5,
		set = lists_reverse(R1, TrUserData),
		del = lists_reverse(R2, TrUserData), start_ts = F@_8,
		commit_now = F@_9, ignore_index_conflict = F@_10};
dfp_read_field_def_Mutation(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    TrUserData) ->
    dg_read_field_def_Mutation(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

dg_read_field_def_Mutation(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Mutation(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, TrUserData);
dg_read_field_def_Mutation(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Mutation_set_json(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData);
      18 ->
	  d_field_Mutation_delete_json(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, TrUserData);
      26 ->
	  d_field_Mutation_set_nquads(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, TrUserData);
      34 ->
	  d_field_Mutation_del_nquads(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, TrUserData);
      42 ->
	  d_field_Mutation_query(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 TrUserData);
      82 ->
	  d_field_Mutation_set(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      90 ->
	  d_field_Mutation_del(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      104 ->
	  d_field_Mutation_start_ts(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData);
      112 ->
	  d_field_Mutation_commit_now(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, TrUserData);
      120 ->
	  d_field_Mutation_ignore_index_conflict(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, F@_9, F@_10,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Mutation(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     TrUserData);
	    1 ->
		skip_64_Mutation(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 TrUserData);
	    2 ->
		skip_length_delimited_Mutation(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6, F@_7,
					       F@_8, F@_9, F@_10, TrUserData);
	    3 ->
		skip_group_Mutation(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, TrUserData);
	    5 ->
		skip_32_Mutation(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 TrUserData)
	  end
    end;
dg_read_field_def_Mutation(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, R1, R2, F@_8, F@_9, F@_10, TrUserData) ->
    #'Mutation'{set_json = F@_1, delete_json = F@_2,
		set_nquads = F@_3, del_nquads = F@_4, query = F@_5,
		set = lists_reverse(R1, TrUserData),
		del = lists_reverse(R2, TrUserData), start_ts = F@_8,
		commit_now = F@_9, ignore_index_conflict = F@_10}.

d_field_Mutation_set_json(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Mutation_set_json(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, TrUserData);
d_field_Mutation_set_json(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Mutation(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, TrUserData).

d_field_Mutation_delete_json(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Mutation_delete_json(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, TrUserData);
d_field_Mutation_delete_json(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Mutation(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, TrUserData).

d_field_Mutation_set_nquads(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Mutation_set_nquads(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, TrUserData);
d_field_Mutation_set_nquads(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Mutation(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, TrUserData).

d_field_Mutation_del_nquads(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Mutation_del_nquads(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, TrUserData);
d_field_Mutation_del_nquads(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Mutation(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, TrUserData).

d_field_Mutation_query(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Mutation_query(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData);
d_field_Mutation_query(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
		       F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Mutation(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9,
				F@_10, TrUserData).

d_field_Mutation_set(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData)
    when N < 57 ->
    d_field_Mutation_set(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 TrUserData);
d_field_Mutation_set(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8, F@_9,
		     F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_NQuad(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Mutation(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5,
				cons(NewFValue, Prev, TrUserData), F@_7, F@_8,
				F@_9, F@_10, TrUserData).

d_field_Mutation_del(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData)
    when N < 57 ->
    d_field_Mutation_del(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 TrUserData);
d_field_Mutation_del(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8, F@_9,
		     F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_NQuad(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Mutation(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6,
				cons(NewFValue, Prev, TrUserData), F@_8, F@_9,
				F@_10, TrUserData).

d_field_Mutation_start_ts(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Mutation_start_ts(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, TrUserData);
d_field_Mutation_start_ts(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
			  F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Mutation(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9,
				F@_10, TrUserData).

d_field_Mutation_commit_now(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Mutation_commit_now(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, TrUserData);
d_field_Mutation_commit_now(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, _, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Mutation(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue,
				F@_10, TrUserData).

d_field_Mutation_ignore_index_conflict(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, F@_10,
				       TrUserData)
    when N < 57 ->
    d_field_Mutation_ignore_index_conflict(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					   F@_10, TrUserData);
d_field_Mutation_ignore_index_conflict(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Mutation(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				NewFValue, TrUserData).

skip_varint_Mutation(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData) ->
    skip_varint_Mutation(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_varint_Mutation(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData) ->
    dfp_read_field_def_Mutation(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData).

skip_length_delimited_Mutation(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    skip_length_delimited_Mutation(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_length_delimited_Mutation(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Mutation(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData).

skip_group_Mutation(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Mutation(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData).

skip_32_Mutation(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		 TrUserData) ->
    dfp_read_field_def_Mutation(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData).

skip_64_Mutation(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		 TrUserData) ->
    dfp_read_field_def_Mutation(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData).

decode_msg_Operation(Bin, TrUserData) ->
    dfp_read_field_def_Operation(Bin, 0, 0,
				 id([], TrUserData), id([], TrUserData),
				 id(false, TrUserData), id('NONE', TrUserData),
				 id([], TrUserData), TrUserData).

dfp_read_field_def_Operation(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Operation_schema(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_Operation(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Operation_drop_attr(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Operation(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Operation_drop_all(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Operation(<<32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Operation_drop_op(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Operation(<<42, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Operation_drop_value(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Operation(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, _) ->
    #'Operation'{schema = F@_1, drop_attr = F@_2,
		 drop_all = F@_3, drop_op = F@_4, drop_value = F@_5};
dfp_read_field_def_Operation(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Operation(Other, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Operation(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Operation(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Operation(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Operation_schema(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      18 ->
	  d_field_Operation_drop_attr(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_Operation_drop_all(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      32 ->
	  d_field_Operation_drop_op(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      42 ->
	  d_field_Operation_drop_value(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Operation(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_Operation(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, TrUserData);
	    2 ->
		skip_length_delimited_Operation(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Operation(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Operation(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, TrUserData)
	  end
    end;
dg_read_field_def_Operation(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, _) ->
    #'Operation'{schema = F@_1, drop_attr = F@_2,
		 drop_all = F@_3, drop_op = F@_4, drop_value = F@_5}.

d_field_Operation_schema(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Operation_schema(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Operation_schema(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Operation(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_Operation_drop_attr(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Operation_drop_attr(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Operation_drop_attr(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Operation(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_Operation_drop_all(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Operation_drop_all(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Operation_drop_all(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Operation(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, F@_4, F@_5, TrUserData).

d_field_Operation_drop_op(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Operation_drop_op(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Operation_drop_op(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_Operation.DropOp'(begin
							 <<Res:32/signed-native>> =
							     <<(X bsl N +
								  Acc):32/unsigned-native>>,
							 id(Res, TrUserData)
						       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Operation(RestF, 0, 0, F@_1, F@_2,
				 F@_3, NewFValue, F@_5, TrUserData).

d_field_Operation_drop_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Operation_drop_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Operation_drop_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Operation(RestF, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, NewFValue, TrUserData).

skip_varint_Operation(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Operation(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
skip_varint_Operation(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Operation(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Operation(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    skip_length_delimited_Operation(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
skip_length_delimited_Operation(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Operation(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

skip_group_Operation(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Operation(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

skip_32_Operation(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Operation(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

skip_64_Operation(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Operation(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

decode_msg_Payload(Bin, TrUserData) ->
    dfp_read_field_def_Payload(Bin, 0, 0,
			       id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_Payload(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Payload_Data(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Payload(<<>>, 0, 0, F@_1, _) ->
    #'Payload'{'Data' = F@_1};
dfp_read_field_def_Payload(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_Payload(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_Payload(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Payload(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_Payload(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Payload_Data(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Payload(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Payload(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Payload(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_Payload(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_Payload(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Payload(<<>>, 0, 0, F@_1, _) ->
    #'Payload'{'Data' = F@_1}.

d_field_Payload_Data(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, TrUserData)
    when N < 57 ->
    d_field_Payload_Data(Rest, N + 7, X bsl N + Acc, F@_1,
			 TrUserData);
d_field_Payload_Data(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Payload(RestF, 0, 0, NewFValue,
			       TrUserData).

skip_varint_Payload(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_Payload(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Payload(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_Payload(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_Payload(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Payload(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Payload(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Payload(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_Payload(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Payload(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_Payload(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Payload(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_Payload(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Payload(Rest, Z1, Z2, F@_1,
			       TrUserData).

decode_msg_TxnContext(Bin, TrUserData) ->
    dfp_read_field_def_TxnContext(Bin, 0, 0,
				  id(0, TrUserData), id(0, TrUserData),
				  id(false, TrUserData), id([], TrUserData),
				  id([], TrUserData), id(undefined, TrUserData),
				  TrUserData).

dfp_read_field_def_TxnContext(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_TxnContext_start_ts(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TxnContext(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_TxnContext_commit_ts(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TxnContext(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_TxnContext_aborted(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TxnContext(<<34, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_TxnContext_keys(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TxnContext(<<42, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_TxnContext_preds(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TxnContext(<<106, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_TxnContext_lin_read(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TxnContext(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, R1, R2, F@_6, TrUserData) ->
    #'TxnContext'{start_ts = F@_1, commit_ts = F@_2,
		  aborted = F@_3, keys = lists_reverse(R1, TrUserData),
		  preds = lists_reverse(R2, TrUserData), lin_read = F@_6};
dfp_read_field_def_TxnContext(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_TxnContext(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_TxnContext(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TxnContext(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
dg_read_field_def_TxnContext(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_TxnContext_start_ts(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, TrUserData);
      16 ->
	  d_field_TxnContext_commit_ts(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
      24 ->
	  d_field_TxnContext_aborted(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, TrUserData);
      34 ->
	  d_field_TxnContext_keys(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, TrUserData);
      42 ->
	  d_field_TxnContext_preds(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, TrUserData);
      106 ->
	  d_field_TxnContext_lin_read(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TxnContext(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_TxnContext(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_TxnContext(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
	    3 ->
		skip_group_TxnContext(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_TxnContext(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_TxnContext(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, R1, R2, F@_6, TrUserData) ->
    #'TxnContext'{start_ts = F@_1, commit_ts = F@_2,
		  aborted = F@_3, keys = lists_reverse(R1, TrUserData),
		  preds = lists_reverse(R2, TrUserData), lin_read = F@_6}.

d_field_TxnContext_start_ts(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData)
    when N < 57 ->
    d_field_TxnContext_start_ts(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TxnContext_start_ts(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_TxnContext(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_TxnContext_commit_ts(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 57 ->
    d_field_TxnContext_commit_ts(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
d_field_TxnContext_commit_ts(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_TxnContext(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, F@_6,
				  TrUserData).

d_field_TxnContext_aborted(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_TxnContext_aborted(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TxnContext_aborted(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_TxnContext(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_TxnContext_keys(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_TxnContext_keys(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TxnContext_keys(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_TxnContext(RestF, 0, 0, F@_1, F@_2,
				  F@_3, cons(NewFValue, Prev, TrUserData), F@_5,
				  F@_6, TrUserData).

d_field_TxnContext_preds(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_TxnContext_preds(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TxnContext_preds(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_TxnContext(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, cons(NewFValue, Prev, TrUserData),
				  F@_6, TrUserData).

d_field_TxnContext_lin_read(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData)
    when N < 57 ->
    d_field_TxnContext_lin_read(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TxnContext_lin_read(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev,
			    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_LinRead(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_TxnContext(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5,
				  if Prev == undefined -> NewFValue;
				     true ->
					 merge_msg_LinRead(Prev, NewFValue,
							   TrUserData)
				  end,
				  TrUserData).

skip_varint_TxnContext(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_TxnContext(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, TrUserData);
skip_varint_TxnContext(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_TxnContext(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_TxnContext(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_TxnContext(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
skip_length_delimited_TxnContext(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TxnContext(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_TxnContext(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TxnContext(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_TxnContext(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_TxnContext(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_TxnContext(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_TxnContext(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_Check(Bin, TrUserData) ->
    dfp_read_field_def_Check(Bin, 0, 0, TrUserData).

dfp_read_field_def_Check(<<>>, 0, 0, _) -> #'Check'{};
dfp_read_field_def_Check(Other, Z1, Z2, TrUserData) ->
    dg_read_field_def_Check(Other, Z1, Z2, TrUserData).

dg_read_field_def_Check(<<1:1, X:7, Rest/binary>>, N,
			Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Check(Rest, N + 7, X bsl N + Acc,
			    TrUserData);
dg_read_field_def_Check(<<0:1, X:7, Rest/binary>>, N,
			Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_Check(Rest, 0, 0, TrUserData);
      1 -> skip_64_Check(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_Check(Rest, 0, 0, TrUserData);
      3 -> skip_group_Check(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_Check(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_Check(<<>>, 0, 0, _) -> #'Check'{}.

skip_varint_Check(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  TrUserData) ->
    skip_varint_Check(Rest, Z1, Z2, TrUserData);
skip_varint_Check(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  TrUserData) ->
    dfp_read_field_def_Check(Rest, Z1, Z2, TrUserData).

skip_length_delimited_Check(<<1:1, X:7, Rest/binary>>,
			    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_Check(Rest, N + 7, X bsl N + Acc,
				TrUserData);
skip_length_delimited_Check(<<0:1, X:7, Rest/binary>>,
			    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Check(Rest2, 0, 0, TrUserData).

skip_group_Check(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Check(Rest, 0, Z2, TrUserData).

skip_32_Check(<<_:32, Rest/binary>>, Z1, Z2,
	      TrUserData) ->
    dfp_read_field_def_Check(Rest, Z1, Z2, TrUserData).

skip_64_Check(<<_:64, Rest/binary>>, Z1, Z2,
	      TrUserData) ->
    dfp_read_field_def_Check(Rest, Z1, Z2, TrUserData).

decode_msg_Version(Bin, TrUserData) ->
    dfp_read_field_def_Version(Bin, 0, 0,
			       id([], TrUserData), TrUserData).

dfp_read_field_def_Version(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Version_tag(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Version(<<>>, 0, 0, F@_1, _) ->
    #'Version'{tag = F@_1};
dfp_read_field_def_Version(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_Version(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_Version(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Version(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_Version(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Version_tag(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Version(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Version(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Version(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_Version(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_Version(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Version(<<>>, 0, 0, F@_1, _) ->
    #'Version'{tag = F@_1}.

d_field_Version_tag(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, TrUserData)
    when N < 57 ->
    d_field_Version_tag(Rest, N + 7, X bsl N + Acc, F@_1,
			TrUserData);
d_field_Version_tag(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Version(RestF, 0, 0, NewFValue,
			       TrUserData).

skip_varint_Version(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_Version(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Version(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_Version(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_Version(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Version(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Version(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Version(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_Version(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Version(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_Version(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Version(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_Version(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Version(Rest, Z1, Z2, F@_1,
			       TrUserData).

decode_msg_LinRead(Bin, TrUserData) ->
    dfp_read_field_def_LinRead(Bin, 0, 0,
			       'tr_decode_init_default_LinRead.ids'([],
								    TrUserData),
			       id('CLIENT_SIDE', TrUserData), TrUserData).

dfp_read_field_def_LinRead(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_LinRead_ids(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_LinRead(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_LinRead_sequencing(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_LinRead(<<>>, 0, 0, R1, F@_2,
			   TrUserData) ->
    #'LinRead'{ids =
		   'tr_decode_repeated_finalize_LinRead.ids'(R1,
							     TrUserData),
	       sequencing = F@_2};
dfp_read_field_def_LinRead(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData) ->
    dg_read_field_def_LinRead(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData).

dg_read_field_def_LinRead(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LinRead(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
dg_read_field_def_LinRead(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LinRead_ids(Rest, 0, 0, F@_1, F@_2, TrUserData);
      16 ->
	  d_field_LinRead_sequencing(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LinRead(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_LinRead(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_LinRead(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    3 ->
		skip_group_LinRead(Rest, Key bsr 3, 0, F@_1, F@_2,
				   TrUserData);
	    5 -> skip_32_LinRead(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_LinRead(<<>>, 0, 0, R1, F@_2,
			  TrUserData) ->
    #'LinRead'{ids =
		   'tr_decode_repeated_finalize_LinRead.ids'(R1,
							     TrUserData),
	       sequencing = F@_2}.

d_field_LinRead_ids(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LinRead_ids(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_LinRead_ids(<<0:1, X:7, Rest/binary>>, N, Acc,
		    Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<uint32,uint64>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LinRead(RestF, 0, 0,
			       'tr_decode_repeated_add_elem_LinRead.ids'(NewFValue,
									 Prev,
									 TrUserData),
			       F@_2, TrUserData).

d_field_LinRead_sequencing(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LinRead_sequencing(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_LinRead_sequencing(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_LinRead.Sequencing'(begin
					  <<Res:32/signed-native>> = <<(X bsl N
									  +
									  Acc):32/unsigned-native>>,
					  id(Res, TrUserData)
					end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_LinRead(RestF, 0, 0, F@_1, NewFValue,
			       TrUserData).

skip_varint_LinRead(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    skip_varint_LinRead(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
skip_varint_LinRead(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LinRead(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_length_delimited_LinRead(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LinRead(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_LinRead(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LinRead(Rest2, 0, 0, F@_1, F@_2,
			       TrUserData).

skip_group_LinRead(Bin, FNum, Z2, F@_1, F@_2,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LinRead(Rest, 0, Z2, F@_1, F@_2,
			       TrUserData).

skip_32_LinRead(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_LinRead(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_64_LinRead(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_LinRead(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

decode_msg_Latency(Bin, TrUserData) ->
    dfp_read_field_def_Latency(Bin, 0, 0, id(0, TrUserData),
			       id(0, TrUserData), id(0, TrUserData),
			       TrUserData).

dfp_read_field_def_Latency(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Latency_parsing_ns(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_Latency(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Latency_processing_ns(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_Latency(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Latency_encoding_ns(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_Latency(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #'Latency'{parsing_ns = F@_1, processing_ns = F@_2,
	       encoding_ns = F@_3};
dfp_read_field_def_Latency(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    dg_read_field_def_Latency(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

dg_read_field_def_Latency(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Latency(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Latency(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Latency_parsing_ns(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      16 ->
	  d_field_Latency_processing_ns(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      24 ->
	  d_field_Latency_encoding_ns(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Latency(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    1 ->
		skip_64_Latency(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    2 ->
		skip_length_delimited_Latency(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    3 ->
		skip_group_Latency(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    5 ->
		skip_32_Latency(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
	  end
    end;
dg_read_field_def_Latency(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    #'Latency'{parsing_ns = F@_1, processing_ns = F@_2,
	       encoding_ns = F@_3}.

d_field_Latency_parsing_ns(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Latency_parsing_ns(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_Latency_parsing_ns(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Latency(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, TrUserData).

d_field_Latency_processing_ns(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Latency_processing_ns(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_Latency_processing_ns(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Latency(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, TrUserData).

d_field_Latency_encoding_ns(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Latency_encoding_ns(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_Latency_encoding_ns(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Latency(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, TrUserData).

skip_varint_Latency(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Latency(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_Latency(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Latency(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_length_delimited_Latency(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Latency(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Latency(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Latency(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, TrUserData).

skip_group_Latency(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Latency(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_32_Latency(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Latency(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_64_Latency(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Latency(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

decode_msg_NQuad(Bin, TrUserData) ->
    dfp_read_field_def_NQuad(Bin, 0, 0, id([], TrUserData),
			     id([], TrUserData), id([], TrUserData),
			     id(undefined, TrUserData), id([], TrUserData),
			     id([], TrUserData), id([], TrUserData),
			     TrUserData).

dfp_read_field_def_NQuad(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_NQuad_subject(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_NQuad(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_NQuad_predicate(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_NQuad(<<26, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_NQuad_object_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_NQuad(<<34, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_NQuad_object_value(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_NQuad(<<42, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_NQuad_label(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_NQuad(<<50, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_NQuad_lang(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_NQuad(<<58, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_NQuad_facets(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_NQuad(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, R1, TrUserData) ->
    #'NQuad'{subject = F@_1, predicate = F@_2,
	     object_id = F@_3, object_value = F@_4, label = F@_5,
	     lang = F@_6, facets = lists_reverse(R1, TrUserData)};
dfp_read_field_def_NQuad(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_NQuad(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_NQuad(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NQuad(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData);
dg_read_field_def_NQuad(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_NQuad_subject(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, TrUserData);
      18 ->
	  d_field_NQuad_predicate(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, TrUserData);
      26 ->
	  d_field_NQuad_object_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, TrUserData);
      34 ->
	  d_field_NQuad_object_value(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      42 ->
	  d_field_NQuad_label(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      50 ->
	  d_field_NQuad_lang(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, TrUserData);
      58 ->
	  d_field_NQuad_facets(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NQuad(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_NQuad(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_NQuad(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, F@_7,
					    TrUserData);
	    3 ->
		skip_group_NQuad(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_NQuad(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_NQuad(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, R1, TrUserData) ->
    #'NQuad'{subject = F@_1, predicate = F@_2,
	     object_id = F@_3, object_value = F@_4, label = F@_5,
	     lang = F@_6, facets = lists_reverse(R1, TrUserData)}.

d_field_NQuad_subject(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_NQuad_subject(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_NQuad_subject(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NQuad(RestF, 0, 0, NewFValue, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_NQuad_predicate(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData)
    when N < 57 ->
    d_field_NQuad_predicate(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData);
d_field_NQuad_predicate(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NQuad(RestF, 0, 0, F@_1, NewFValue,
			     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_NQuad_object_id(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData)
    when N < 57 ->
    d_field_NQuad_object_id(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData);
d_field_NQuad_object_id(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NQuad(RestF, 0, 0, F@_1, F@_2,
			     NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_NQuad_object_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_NQuad_object_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_NQuad_object_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Value(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NQuad(RestF, 0, 0, F@_1, F@_2, F@_3,
			     if Prev == undefined -> NewFValue;
				true ->
				    merge_msg_Value(Prev, NewFValue, TrUserData)
			     end,
			     F@_5, F@_6, F@_7, TrUserData).

d_field_NQuad_label(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_NQuad_label(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_NQuad_label(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NQuad(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_NQuad_lang(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_NQuad_lang(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_NQuad_lang(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NQuad(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_NQuad_facets(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_NQuad_facets(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_NQuad_facets(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Facet(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NQuad(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6,
			     cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_NQuad(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_NQuad(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, TrUserData);
skip_varint_NQuad(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_NQuad(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_NQuad(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 57 ->
    skip_length_delimited_NQuad(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
skip_length_delimited_NQuad(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NQuad(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_NQuad(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		 F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NQuad(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_NQuad(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_NQuad(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_NQuad(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_NQuad(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_Value(Bin, TrUserData) ->
    dfp_read_field_def_Value(Bin, 0, 0,
			     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Value(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Value_default_val(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_Value(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Value_bytes_val(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Value(<<24, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Value_int_val(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Value(<<32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Value_bool_val(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Value(<<42, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Value_str_val(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Value(<<49, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Value_double_val(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_Value(<<58, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Value_geo_val(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Value(<<66, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Value_date_val(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Value(<<74, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Value_datetime_val(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_Value(<<82, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Value_password_val(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_Value(<<88, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Value_uid_val(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Value(<<>>, 0, 0, F@_1, _) ->
    #'Value'{val = F@_1};
dfp_read_field_def_Value(Other, Z1, Z2, F@_1,
			 TrUserData) ->
    dg_read_field_def_Value(Other, Z1, Z2, F@_1,
			    TrUserData).

dg_read_field_def_Value(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Value(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
dg_read_field_def_Value(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Value_default_val(Rest, 0, 0, F@_1, TrUserData);
      18 ->
	  d_field_Value_bytes_val(Rest, 0, 0, F@_1, TrUserData);
      24 ->
	  d_field_Value_int_val(Rest, 0, 0, F@_1, TrUserData);
      32 ->
	  d_field_Value_bool_val(Rest, 0, 0, F@_1, TrUserData);
      42 ->
	  d_field_Value_str_val(Rest, 0, 0, F@_1, TrUserData);
      49 ->
	  d_field_Value_double_val(Rest, 0, 0, F@_1, TrUserData);
      58 ->
	  d_field_Value_geo_val(Rest, 0, 0, F@_1, TrUserData);
      66 ->
	  d_field_Value_date_val(Rest, 0, 0, F@_1, TrUserData);
      74 ->
	  d_field_Value_datetime_val(Rest, 0, 0, F@_1,
				     TrUserData);
      82 ->
	  d_field_Value_password_val(Rest, 0, 0, F@_1,
				     TrUserData);
      88 ->
	  d_field_Value_uid_val(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Value(Rest, 0, 0, F@_1,
					    TrUserData);
	    3 ->
		skip_group_Value(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_Value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Value(<<>>, 0, 0, F@_1, _) ->
    #'Value'{val = F@_1}.

d_field_Value_default_val(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Value_default_val(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_Value_default_val(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Value(RestF, 0, 0,
			     id({default_val, NewFValue}, TrUserData),
			     TrUserData).

d_field_Value_bytes_val(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Value_bytes_val(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_Value_bytes_val(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Value(RestF, 0, 0,
			     id({bytes_val, NewFValue}, TrUserData),
			     TrUserData).

d_field_Value_int_val(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_Value_int_val(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_Value_int_val(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Value(RestF, 0, 0,
			     id({int_val, NewFValue}, TrUserData), TrUserData).

d_field_Value_bool_val(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Value_bool_val(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_Value_bool_val(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Value(RestF, 0, 0,
			     id({bool_val, NewFValue}, TrUserData), TrUserData).

d_field_Value_str_val(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_Value_str_val(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_Value_str_val(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Value(RestF, 0, 0,
			     id({str_val, NewFValue}, TrUserData), TrUserData).

d_field_Value_double_val(<<0:48, 240, 127,
			   Rest/binary>>,
			 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_Value(Rest, Z1, Z2,
			     id({double_val, id(infinity, TrUserData)},
				TrUserData),
			     TrUserData);
d_field_Value_double_val(<<0:48, 240, 255,
			   Rest/binary>>,
			 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_Value(Rest, Z1, Z2,
			     id({double_val, id('-infinity', TrUserData)},
				TrUserData),
			     TrUserData);
d_field_Value_double_val(<<_:48, 15:4, _:4, _:1, 127:7,
			   Rest/binary>>,
			 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_Value(Rest, Z1, Z2,
			     id({double_val, id(nan, TrUserData)}, TrUserData),
			     TrUserData);
d_field_Value_double_val(<<Value:64/little-float,
			   Rest/binary>>,
			 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_Value(Rest, Z1, Z2,
			     id({double_val, id(Value, TrUserData)},
				TrUserData),
			     TrUserData).

d_field_Value_geo_val(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_Value_geo_val(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_Value_geo_val(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Value(RestF, 0, 0,
			     id({geo_val, NewFValue}, TrUserData), TrUserData).

d_field_Value_date_val(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Value_date_val(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_Value_date_val(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Value(RestF, 0, 0,
			     id({date_val, NewFValue}, TrUserData), TrUserData).

d_field_Value_datetime_val(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Value_datetime_val(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_Value_datetime_val(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Value(RestF, 0, 0,
			     id({datetime_val, NewFValue}, TrUserData),
			     TrUserData).

d_field_Value_password_val(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Value_password_val(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_Value_password_val(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Value(RestF, 0, 0,
			     id({password_val, NewFValue}, TrUserData),
			     TrUserData).

d_field_Value_uid_val(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_Value_uid_val(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_Value_uid_val(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Value(RestF, 0, 0,
			     id({uid_val, NewFValue}, TrUserData), TrUserData).

skip_varint_Value(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, TrUserData) ->
    skip_varint_Value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Value(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, TrUserData) ->
    dfp_read_field_def_Value(Rest, Z1, Z2, F@_1,
			     TrUserData).

skip_length_delimited_Value(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Value(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
skip_length_delimited_Value(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Value(Rest2, 0, 0, F@_1, TrUserData).

skip_group_Value(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Value(Rest, 0, Z2, F@_1, TrUserData).

skip_32_Value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	      TrUserData) ->
    dfp_read_field_def_Value(Rest, Z1, Z2, F@_1,
			     TrUserData).

skip_64_Value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	      TrUserData) ->
    dfp_read_field_def_Value(Rest, Z1, Z2, F@_1,
			     TrUserData).

decode_msg_Facet(Bin, TrUserData) ->
    dfp_read_field_def_Facet(Bin, 0, 0, id([], TrUserData),
			     id(<<>>, TrUserData), id('STRING', TrUserData),
			     id([], TrUserData), id([], TrUserData),
			     TrUserData).

dfp_read_field_def_Facet(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Facet_key(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, TrUserData);
dfp_read_field_def_Facet(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Facet_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_Facet(<<24, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Facet_val_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_Facet(<<34, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Facet_tokens(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_Facet(<<42, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Facet_alias(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_Facet(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 R1, F@_5, TrUserData) ->
    #'Facet'{key = F@_1, value = F@_2, val_type = F@_3,
	     tokens = lists_reverse(R1, TrUserData), alias = F@_5};
dfp_read_field_def_Facet(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Facet(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData).

dg_read_field_def_Facet(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Facet(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Facet(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Facet_key(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, TrUserData);
      18 ->
	  d_field_Facet_value(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      24 ->
	  d_field_Facet_val_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      34 ->
	  d_field_Facet_tokens(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      42 ->
	  d_field_Facet_alias(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Facet(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, TrUserData);
	    1 ->
		skip_64_Facet(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData);
	    2 ->
		skip_length_delimited_Facet(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Facet(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Facet(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData)
	  end
    end;
dg_read_field_def_Facet(<<>>, 0, 0, F@_1, F@_2, F@_3,
			R1, F@_5, TrUserData) ->
    #'Facet'{key = F@_1, value = F@_2, val_type = F@_3,
	     tokens = lists_reverse(R1, TrUserData), alias = F@_5}.

d_field_Facet_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Facet_key(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Facet_key(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Facet(RestF, 0, 0, NewFValue, F@_2,
			     F@_3, F@_4, F@_5, TrUserData).

d_field_Facet_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Facet_value(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Facet_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Facet(RestF, 0, 0, F@_1, NewFValue,
			     F@_3, F@_4, F@_5, TrUserData).

d_field_Facet_val_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Facet_val_type(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Facet_val_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_Facet.ValType'(begin
						      <<Res:32/signed-native>> =
							  <<(X bsl N +
							       Acc):32/unsigned-native>>,
						      id(Res, TrUserData)
						    end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Facet(RestF, 0, 0, F@_1, F@_2,
			     NewFValue, F@_4, F@_5, TrUserData).

d_field_Facet_tokens(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Facet_tokens(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Facet_tokens(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Facet(RestF, 0, 0, F@_1, F@_2, F@_3,
			     cons(NewFValue, Prev, TrUserData), F@_5,
			     TrUserData).

d_field_Facet_alias(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Facet_alias(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Facet_alias(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Facet(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, NewFValue, TrUserData).

skip_varint_Facet(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Facet(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, TrUserData);
skip_varint_Facet(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Facet(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

skip_length_delimited_Facet(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Facet(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_Facet(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Facet(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

skip_group_Facet(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		 F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Facet(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

skip_32_Facet(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Facet(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

skip_64_Facet(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Facet(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

decode_msg_SchemaNode(Bin, TrUserData) ->
    dfp_read_field_def_SchemaNode(Bin, 0, 0,
				  id([], TrUserData), id([], TrUserData),
				  id(false, TrUserData), id([], TrUserData),
				  id(false, TrUserData), id(false, TrUserData),
				  id(false, TrUserData), id(false, TrUserData),
				  id(false, TrUserData), TrUserData).

dfp_read_field_def_SchemaNode(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    d_field_SchemaNode_predicate(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 TrUserData);
dfp_read_field_def_SchemaNode(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    d_field_SchemaNode_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_SchemaNode(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    d_field_SchemaNode_index(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_SchemaNode(<<34, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    d_field_SchemaNode_tokenizer(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 TrUserData);
dfp_read_field_def_SchemaNode(<<40, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    d_field_SchemaNode_reverse(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData);
dfp_read_field_def_SchemaNode(<<48, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    d_field_SchemaNode_count(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_SchemaNode(<<56, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    d_field_SchemaNode_list(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_SchemaNode(<<64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    d_field_SchemaNode_upsert(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData);
dfp_read_field_def_SchemaNode(<<72, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    d_field_SchemaNode_lang(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_SchemaNode(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, R1, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData) ->
    #'SchemaNode'{predicate = F@_1, type = F@_2,
		  index = F@_3, tokenizer = lists_reverse(R1, TrUserData),
		  reverse = F@_5, count = F@_6, list = F@_7,
		  upsert = F@_8, lang = F@_9};
dfp_read_field_def_SchemaNode(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData) ->
    dg_read_field_def_SchemaNode(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 TrUserData).

dg_read_field_def_SchemaNode(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SchemaNode(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, TrUserData);
dg_read_field_def_SchemaNode(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SchemaNode_predicate(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       TrUserData);
      18 ->
	  d_field_SchemaNode_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData);
      24 ->
	  d_field_SchemaNode_index(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
      34 ->
	  d_field_SchemaNode_tokenizer(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       TrUserData);
      40 ->
	  d_field_SchemaNode_reverse(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				     TrUserData);
      48 ->
	  d_field_SchemaNode_count(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
      56 ->
	  d_field_SchemaNode_list(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData);
      64 ->
	  d_field_SchemaNode_upsert(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    TrUserData);
      72 ->
	  d_field_SchemaNode_lang(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SchemaNode(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       TrUserData);
	    1 ->
		skip_64_SchemaNode(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
	    2 ->
		skip_length_delimited_SchemaNode(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, F@_6, F@_7,
						 F@_8, F@_9, TrUserData);
	    3 ->
		skip_group_SchemaNode(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      TrUserData);
	    5 ->
		skip_32_SchemaNode(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData)
	  end
    end;
dg_read_field_def_SchemaNode(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, R1, F@_5, F@_6, F@_7, F@_8, F@_9,
			     TrUserData) ->
    #'SchemaNode'{predicate = F@_1, type = F@_2,
		  index = F@_3, tokenizer = lists_reverse(R1, TrUserData),
		  reverse = F@_5, count = F@_6, list = F@_7,
		  upsert = F@_8, lang = F@_9}.

d_field_SchemaNode_predicate(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_SchemaNode_predicate(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, TrUserData);
d_field_SchemaNode_predicate(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SchemaNode(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				  F@_9, TrUserData).

d_field_SchemaNode_type(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, TrUserData)
    when N < 57 ->
    d_field_SchemaNode_type(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, TrUserData);
d_field_SchemaNode_type(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SchemaNode(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				  F@_9, TrUserData).

d_field_SchemaNode_index(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, TrUserData)
    when N < 57 ->
    d_field_SchemaNode_index(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, TrUserData);
d_field_SchemaNode_index(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_SchemaNode(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData).

d_field_SchemaNode_tokenizer(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_SchemaNode_tokenizer(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, TrUserData);
d_field_SchemaNode_tokenizer(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7,
			     F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SchemaNode(RestF, 0, 0, F@_1, F@_2,
				  F@_3, cons(NewFValue, Prev, TrUserData), F@_5,
				  F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_SchemaNode_reverse(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, TrUserData)
    when N < 57 ->
    d_field_SchemaNode_reverse(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, TrUserData);
d_field_SchemaNode_reverse(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8,
			   F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_SchemaNode(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9,
				  TrUserData).

d_field_SchemaNode_count(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, TrUserData)
    when N < 57 ->
    d_field_SchemaNode_count(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, TrUserData);
d_field_SchemaNode_count(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
			 TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_SchemaNode(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9,
				  TrUserData).

d_field_SchemaNode_list(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, TrUserData)
    when N < 57 ->
    d_field_SchemaNode_list(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, TrUserData);
d_field_SchemaNode_list(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
			TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_SchemaNode(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9,
				  TrUserData).

d_field_SchemaNode_upsert(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData)
    when N < 57 ->
    d_field_SchemaNode_upsert(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, TrUserData);
d_field_SchemaNode_upsert(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
			  F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_SchemaNode(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9,
				  TrUserData).

d_field_SchemaNode_lang(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, TrUserData)
    when N < 57 ->
    d_field_SchemaNode_lang(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, TrUserData);
d_field_SchemaNode_lang(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _,
			TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_SchemaNode(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue,
				  TrUserData).

skip_varint_SchemaNode(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, TrUserData) ->
    skip_varint_SchemaNode(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_varint_SchemaNode(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, TrUserData) ->
    dfp_read_field_def_SchemaNode(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData).

skip_length_delimited_SchemaNode(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    skip_length_delimited_SchemaNode(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_length_delimited_SchemaNode(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SchemaNode(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData).

skip_group_SchemaNode(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SchemaNode(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData).

skip_32_SchemaNode(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   TrUserData) ->
    dfp_read_field_def_SchemaNode(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData).

skip_64_SchemaNode(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   TrUserData) ->
    dfp_read_field_def_SchemaNode(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData).

decode_msg_LoginRequest(Bin, TrUserData) ->
    dfp_read_field_def_LoginRequest(Bin, 0, 0,
				    id([], TrUserData), id([], TrUserData),
				    id([], TrUserData), TrUserData).

dfp_read_field_def_LoginRequest(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_LoginRequest_userid(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_LoginRequest(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_LoginRequest_password(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_LoginRequest(<<26, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_LoginRequest_refresh_token(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_LoginRequest(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    #'LoginRequest'{userid = F@_1, password = F@_2,
		    refresh_token = F@_3};
dfp_read_field_def_LoginRequest(Other, Z1, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    dg_read_field_def_LoginRequest(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData).

dg_read_field_def_LoginRequest(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginRequest(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_LoginRequest(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LoginRequest_userid(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      18 ->
	  d_field_LoginRequest_password(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      26 ->
	  d_field_LoginRequest_refresh_token(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    1 ->
		skip_64_LoginRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    2 ->
		skip_length_delimited_LoginRequest(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_LoginRequest(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, TrUserData);
	    5 ->
		skip_32_LoginRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData)
	  end
    end;
dg_read_field_def_LoginRequest(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #'LoginRequest'{userid = F@_1, password = F@_2,
		    refresh_token = F@_3}.

d_field_LoginRequest_userid(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_LoginRequest_userid(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_LoginRequest_userid(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginRequest(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, TrUserData).

d_field_LoginRequest_password(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_LoginRequest_password(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_LoginRequest_password(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginRequest(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, TrUserData).

d_field_LoginRequest_refresh_token(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_LoginRequest_refresh_token(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_LoginRequest_refresh_token(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginRequest(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, TrUserData).

skip_varint_LoginRequest(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_LoginRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
skip_varint_LoginRequest(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LoginRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_length_delimited_LoginRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
skip_length_delimited_LoginRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginRequest(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, TrUserData).

skip_group_LoginRequest(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginRequest(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, TrUserData).

skip_32_LoginRequest(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LoginRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_64_LoginRequest(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LoginRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

decode_msg_Jwt(Bin, TrUserData) ->
    dfp_read_field_def_Jwt(Bin, 0, 0, id([], TrUserData),
			   id([], TrUserData), TrUserData).

dfp_read_field_def_Jwt(<<10, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    d_field_Jwt_access_jwt(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_Jwt(<<18, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    d_field_Jwt_refresh_jwt(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_Jwt(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Jwt'{access_jwt = F@_1, refresh_jwt = F@_2};
dfp_read_field_def_Jwt(Other, Z1, Z2, F@_1, F@_2,
		       TrUserData) ->
    dg_read_field_def_Jwt(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData).

dg_read_field_def_Jwt(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Jwt(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
dg_read_field_def_Jwt(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Jwt_access_jwt(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_Jwt_refresh_jwt(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Jwt(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Jwt(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Jwt(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    3 ->
		skip_group_Jwt(Rest, Key bsr 3, 0, F@_1, F@_2,
			       TrUserData);
	    5 -> skip_32_Jwt(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Jwt(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Jwt'{access_jwt = F@_1, refresh_jwt = F@_2}.

d_field_Jwt_access_jwt(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Jwt_access_jwt(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_Jwt_access_jwt(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Jwt(RestF, 0, 0, NewFValue, F@_2,
			   TrUserData).

d_field_Jwt_refresh_jwt(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Jwt_refresh_jwt(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_Jwt_refresh_jwt(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Jwt(RestF, 0, 0, F@_1, NewFValue,
			   TrUserData).

skip_varint_Jwt(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    skip_varint_Jwt(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_Jwt(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_Jwt(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_length_delimited_Jwt(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Jwt(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
skip_length_delimited_Jwt(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Jwt(Rest2, 0, 0, F@_1, F@_2,
			   TrUserData).

skip_group_Jwt(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Jwt(Rest, 0, Z2, F@_1, F@_2,
			   TrUserData).

skip_32_Jwt(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_Jwt(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_64_Jwt(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_Jwt(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

'decode_msg_map<uint32,uint64>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<uint32,uint64>'(Bin, 0, 0,
					    id(0, TrUserData),
					    id(0, TrUserData), TrUserData).

'dfp_read_field_def_map<uint32,uint64>'(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<uint32,uint64>_key'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<uint32,uint64>'(<<16,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<uint32,uint64>_value'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'dfp_read_field_def_map<uint32,uint64>'(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #'map<uint32,uint64>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<uint32,uint64>'(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<uint32,uint64>'(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'dg_read_field_def_map<uint32,uint64>'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<uint32,uint64>'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'dg_read_field_def_map<uint32,uint64>'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<uint32,uint64>_key'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      16 ->
	  'd_field_map<uint32,uint64>_value'(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<uint32,uint64>'(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		'skip_64_map<uint32,uint64>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		'skip_length_delimited_map<uint32,uint64>'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		'skip_group_map<uint32,uint64>'(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_map<uint32,uint64>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
'dg_read_field_def_map<uint32,uint64>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #'map<uint32,uint64>'{key = F@_1, value = F@_2}.

'd_field_map<uint32,uint64>_key'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<uint32,uint64>_key'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<uint32,uint64>_key'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_map<uint32,uint64>'(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

'd_field_map<uint32,uint64>_value'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<uint32,uint64>_value'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<uint32,uint64>_value'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_map<uint32,uint64>'(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

'skip_varint_map<uint32,uint64>'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<uint32,uint64>'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'skip_varint_map<uint32,uint64>'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<uint32,uint64>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_length_delimited_map<uint32,uint64>'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<uint32,uint64>'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'skip_length_delimited_map<uint32,uint64>'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<uint32,uint64>'(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

'skip_group_map<uint32,uint64>'(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<uint32,uint64>'(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

'skip_32_map<uint32,uint64>'(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<uint32,uint64>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_64_map<uint32,uint64>'(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<uint32,uint64>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'decode_msg_map<string,string>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Bin, 0, 0,
					    id([], TrUserData),
					    id([], TrUserData), TrUserData).

'dfp_read_field_def_map<string,string>'(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_key'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_value'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #'map<string,string>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,string>'(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,string>'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,string>'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'dg_read_field_def_map<string,string>'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,string>_key'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  'd_field_map<string,string>_value'(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		'skip_64_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		'skip_length_delimited_map<string,string>'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		'skip_group_map<string,string>'(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #'map<string,string>'{key = F@_1, value = F@_2}.

'd_field_map<string,string>_key'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_key'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_key'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

'd_field_map<string,string>_value'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_value'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_value'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

'skip_varint_map<string,string>'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,string>'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'skip_varint_map<string,string>'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,string>'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,string>'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'skip_length_delimited_map<string,string>'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

'skip_group_map<string,string>'(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,string>'(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'd_enum_Operation.DropOp'(0) -> 'NONE';
'd_enum_Operation.DropOp'(1) -> 'ALL';
'd_enum_Operation.DropOp'(2) -> 'DATA';
'd_enum_Operation.DropOp'(3) -> 'ATTR';
'd_enum_Operation.DropOp'(4) -> 'TYPE';
'd_enum_Operation.DropOp'(V) -> V.

'd_enum_LinRead.Sequencing'(0) -> 'CLIENT_SIDE';
'd_enum_LinRead.Sequencing'(1) -> 'SERVER_SIDE';
'd_enum_LinRead.Sequencing'(V) -> V.

'd_enum_Facet.ValType'(0) -> 'STRING';
'd_enum_Facet.ValType'(1) -> 'INT';
'd_enum_Facet.ValType'(2) -> 'FLOAT';
'd_enum_Facet.ValType'(3) -> 'BOOL';
'd_enum_Facet.ValType'(4) -> 'DATETIME';
'd_enum_Facet.ValType'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Request' -> merge_msg_Request(Prev, New, TrUserData);
      'Response' -> merge_msg_Response(Prev, New, TrUserData);
      'Assigned' -> merge_msg_Assigned(Prev, New, TrUserData);
      'Mutation' -> merge_msg_Mutation(Prev, New, TrUserData);
      'Operation' ->
	  merge_msg_Operation(Prev, New, TrUserData);
      'Payload' -> merge_msg_Payload(Prev, New, TrUserData);
      'TxnContext' ->
	  merge_msg_TxnContext(Prev, New, TrUserData);
      'Check' -> merge_msg_Check(Prev, New, TrUserData);
      'Version' -> merge_msg_Version(Prev, New, TrUserData);
      'LinRead' -> merge_msg_LinRead(Prev, New, TrUserData);
      'Latency' -> merge_msg_Latency(Prev, New, TrUserData);
      'NQuad' -> merge_msg_NQuad(Prev, New, TrUserData);
      'Value' -> merge_msg_Value(Prev, New, TrUserData);
      'Facet' -> merge_msg_Facet(Prev, New, TrUserData);
      'SchemaNode' ->
	  merge_msg_SchemaNode(Prev, New, TrUserData);
      'LoginRequest' ->
	  merge_msg_LoginRequest(Prev, New, TrUserData);
      'Jwt' -> merge_msg_Jwt(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Request/3}).
merge_msg_Request(#'Request'{query = PFquery,
			     vars = PFvars, start_ts = PFstart_ts,
			     lin_read = PFlin_read, read_only = PFread_only,
			     best_effort = PFbest_effort},
		  #'Request'{query = NFquery, vars = NFvars,
			     start_ts = NFstart_ts, lin_read = NFlin_read,
			     read_only = NFread_only,
			     best_effort = NFbest_effort},
		  TrUserData) ->
    #'Request'{query =
		   if NFquery =:= undefined -> PFquery;
		      true -> NFquery
		   end,
	       vars =
		   if PFvars /= undefined, NFvars /= undefined ->
			  'tr_merge_Request.vars'(PFvars, NFvars, TrUserData);
		      PFvars == undefined -> NFvars;
		      NFvars == undefined -> PFvars
		   end,
	       start_ts =
		   if NFstart_ts =:= undefined -> PFstart_ts;
		      true -> NFstart_ts
		   end,
	       lin_read =
		   if PFlin_read /= undefined, NFlin_read /= undefined ->
			  merge_msg_LinRead(PFlin_read, NFlin_read, TrUserData);
		      PFlin_read == undefined -> NFlin_read;
		      NFlin_read == undefined -> PFlin_read
		   end,
	       read_only =
		   if NFread_only =:= undefined -> PFread_only;
		      true -> NFread_only
		   end,
	       best_effort =
		   if NFbest_effort =:= undefined -> PFbest_effort;
		      true -> NFbest_effort
		   end}.

-compile({nowarn_unused_function,merge_msg_Response/3}).
merge_msg_Response(#'Response'{json = PFjson,
			       schema = PFschema, txn = PFtxn,
			       latency = PFlatency},
		   #'Response'{json = NFjson, schema = NFschema,
			       txn = NFtxn, latency = NFlatency},
		   TrUserData) ->
    #'Response'{json =
		    if NFjson =:= undefined -> PFjson;
		       true -> NFjson
		    end,
		schema =
		    if PFschema /= undefined, NFschema /= undefined ->
			   'erlang_++'(PFschema, NFschema, TrUserData);
		       PFschema == undefined -> NFschema;
		       NFschema == undefined -> PFschema
		    end,
		txn =
		    if PFtxn /= undefined, NFtxn /= undefined ->
			   merge_msg_TxnContext(PFtxn, NFtxn, TrUserData);
		       PFtxn == undefined -> NFtxn;
		       NFtxn == undefined -> PFtxn
		    end,
		latency =
		    if PFlatency /= undefined, NFlatency /= undefined ->
			   merge_msg_Latency(PFlatency, NFlatency, TrUserData);
		       PFlatency == undefined -> NFlatency;
		       NFlatency == undefined -> PFlatency
		    end}.

-compile({nowarn_unused_function,merge_msg_Assigned/3}).
merge_msg_Assigned(#'Assigned'{uids = PFuids,
			       context = PFcontext, latency = PFlatency},
		   #'Assigned'{uids = NFuids, context = NFcontext,
			       latency = NFlatency},
		   TrUserData) ->
    #'Assigned'{uids =
		    if PFuids /= undefined, NFuids /= undefined ->
			   'tr_merge_Assigned.uids'(PFuids, NFuids, TrUserData);
		       PFuids == undefined -> NFuids;
		       NFuids == undefined -> PFuids
		    end,
		context =
		    if PFcontext /= undefined, NFcontext /= undefined ->
			   merge_msg_TxnContext(PFcontext, NFcontext,
						TrUserData);
		       PFcontext == undefined -> NFcontext;
		       NFcontext == undefined -> PFcontext
		    end,
		latency =
		    if PFlatency /= undefined, NFlatency /= undefined ->
			   merge_msg_Latency(PFlatency, NFlatency, TrUserData);
		       PFlatency == undefined -> NFlatency;
		       NFlatency == undefined -> PFlatency
		    end}.

-compile({nowarn_unused_function,merge_msg_Mutation/3}).
merge_msg_Mutation(#'Mutation'{set_json = PFset_json,
			       delete_json = PFdelete_json,
			       set_nquads = PFset_nquads,
			       del_nquads = PFdel_nquads, query = PFquery,
			       set = PFset, del = PFdel, start_ts = PFstart_ts,
			       commit_now = PFcommit_now,
			       ignore_index_conflict = PFignore_index_conflict},
		   #'Mutation'{set_json = NFset_json,
			       delete_json = NFdelete_json,
			       set_nquads = NFset_nquads,
			       del_nquads = NFdel_nquads, query = NFquery,
			       set = NFset, del = NFdel, start_ts = NFstart_ts,
			       commit_now = NFcommit_now,
			       ignore_index_conflict = NFignore_index_conflict},
		   TrUserData) ->
    #'Mutation'{set_json =
		    if NFset_json =:= undefined -> PFset_json;
		       true -> NFset_json
		    end,
		delete_json =
		    if NFdelete_json =:= undefined -> PFdelete_json;
		       true -> NFdelete_json
		    end,
		set_nquads =
		    if NFset_nquads =:= undefined -> PFset_nquads;
		       true -> NFset_nquads
		    end,
		del_nquads =
		    if NFdel_nquads =:= undefined -> PFdel_nquads;
		       true -> NFdel_nquads
		    end,
		query =
		    if NFquery =:= undefined -> PFquery;
		       true -> NFquery
		    end,
		set =
		    if PFset /= undefined, NFset /= undefined ->
			   'erlang_++'(PFset, NFset, TrUserData);
		       PFset == undefined -> NFset;
		       NFset == undefined -> PFset
		    end,
		del =
		    if PFdel /= undefined, NFdel /= undefined ->
			   'erlang_++'(PFdel, NFdel, TrUserData);
		       PFdel == undefined -> NFdel;
		       NFdel == undefined -> PFdel
		    end,
		start_ts =
		    if NFstart_ts =:= undefined -> PFstart_ts;
		       true -> NFstart_ts
		    end,
		commit_now =
		    if NFcommit_now =:= undefined -> PFcommit_now;
		       true -> NFcommit_now
		    end,
		ignore_index_conflict =
		    if NFignore_index_conflict =:= undefined ->
			   PFignore_index_conflict;
		       true -> NFignore_index_conflict
		    end}.

-compile({nowarn_unused_function,merge_msg_Operation/3}).
merge_msg_Operation(#'Operation'{schema = PFschema,
				 drop_attr = PFdrop_attr, drop_all = PFdrop_all,
				 drop_op = PFdrop_op,
				 drop_value = PFdrop_value},
		    #'Operation'{schema = NFschema, drop_attr = NFdrop_attr,
				 drop_all = NFdrop_all, drop_op = NFdrop_op,
				 drop_value = NFdrop_value},
		    _) ->
    #'Operation'{schema =
		     if NFschema =:= undefined -> PFschema;
			true -> NFschema
		     end,
		 drop_attr =
		     if NFdrop_attr =:= undefined -> PFdrop_attr;
			true -> NFdrop_attr
		     end,
		 drop_all =
		     if NFdrop_all =:= undefined -> PFdrop_all;
			true -> NFdrop_all
		     end,
		 drop_op =
		     if NFdrop_op =:= undefined -> PFdrop_op;
			true -> NFdrop_op
		     end,
		 drop_value =
		     if NFdrop_value =:= undefined -> PFdrop_value;
			true -> NFdrop_value
		     end}.

-compile({nowarn_unused_function,merge_msg_Payload/3}).
merge_msg_Payload(#'Payload'{'Data' = PFData},
		  #'Payload'{'Data' = NFData}, _) ->
    #'Payload'{'Data' =
		   if NFData =:= undefined -> PFData;
		      true -> NFData
		   end}.

-compile({nowarn_unused_function,merge_msg_TxnContext/3}).
merge_msg_TxnContext(#'TxnContext'{start_ts =
				       PFstart_ts,
				   commit_ts = PFcommit_ts, aborted = PFaborted,
				   keys = PFkeys, preds = PFpreds,
				   lin_read = PFlin_read},
		     #'TxnContext'{start_ts = NFstart_ts,
				   commit_ts = NFcommit_ts, aborted = NFaborted,
				   keys = NFkeys, preds = NFpreds,
				   lin_read = NFlin_read},
		     TrUserData) ->
    #'TxnContext'{start_ts =
		      if NFstart_ts =:= undefined -> PFstart_ts;
			 true -> NFstart_ts
		      end,
		  commit_ts =
		      if NFcommit_ts =:= undefined -> PFcommit_ts;
			 true -> NFcommit_ts
		      end,
		  aborted =
		      if NFaborted =:= undefined -> PFaborted;
			 true -> NFaborted
		      end,
		  keys =
		      if PFkeys /= undefined, NFkeys /= undefined ->
			     'erlang_++'(PFkeys, NFkeys, TrUserData);
			 PFkeys == undefined -> NFkeys;
			 NFkeys == undefined -> PFkeys
		      end,
		  preds =
		      if PFpreds /= undefined, NFpreds /= undefined ->
			     'erlang_++'(PFpreds, NFpreds, TrUserData);
			 PFpreds == undefined -> NFpreds;
			 NFpreds == undefined -> PFpreds
		      end,
		  lin_read =
		      if PFlin_read /= undefined, NFlin_read /= undefined ->
			     merge_msg_LinRead(PFlin_read, NFlin_read,
					       TrUserData);
			 PFlin_read == undefined -> NFlin_read;
			 NFlin_read == undefined -> PFlin_read
		      end}.

-compile({nowarn_unused_function,merge_msg_Check/3}).
merge_msg_Check(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_Version/3}).
merge_msg_Version(#'Version'{tag = PFtag},
		  #'Version'{tag = NFtag}, _) ->
    #'Version'{tag =
		   if NFtag =:= undefined -> PFtag;
		      true -> NFtag
		   end}.

-compile({nowarn_unused_function,merge_msg_LinRead/3}).
merge_msg_LinRead(#'LinRead'{ids = PFids,
			     sequencing = PFsequencing},
		  #'LinRead'{ids = NFids, sequencing = NFsequencing},
		  TrUserData) ->
    #'LinRead'{ids =
		   if PFids /= undefined, NFids /= undefined ->
			  'tr_merge_LinRead.ids'(PFids, NFids, TrUserData);
		      PFids == undefined -> NFids;
		      NFids == undefined -> PFids
		   end,
	       sequencing =
		   if NFsequencing =:= undefined -> PFsequencing;
		      true -> NFsequencing
		   end}.

-compile({nowarn_unused_function,merge_msg_Latency/3}).
merge_msg_Latency(#'Latency'{parsing_ns = PFparsing_ns,
			     processing_ns = PFprocessing_ns,
			     encoding_ns = PFencoding_ns},
		  #'Latency'{parsing_ns = NFparsing_ns,
			     processing_ns = NFprocessing_ns,
			     encoding_ns = NFencoding_ns},
		  _) ->
    #'Latency'{parsing_ns =
		   if NFparsing_ns =:= undefined -> PFparsing_ns;
		      true -> NFparsing_ns
		   end,
	       processing_ns =
		   if NFprocessing_ns =:= undefined -> PFprocessing_ns;
		      true -> NFprocessing_ns
		   end,
	       encoding_ns =
		   if NFencoding_ns =:= undefined -> PFencoding_ns;
		      true -> NFencoding_ns
		   end}.

-compile({nowarn_unused_function,merge_msg_NQuad/3}).
merge_msg_NQuad(#'NQuad'{subject = PFsubject,
			 predicate = PFpredicate, object_id = PFobject_id,
			 object_value = PFobject_value, label = PFlabel,
			 lang = PFlang, facets = PFfacets},
		#'NQuad'{subject = NFsubject, predicate = NFpredicate,
			 object_id = NFobject_id, object_value = NFobject_value,
			 label = NFlabel, lang = NFlang, facets = NFfacets},
		TrUserData) ->
    #'NQuad'{subject =
		 if NFsubject =:= undefined -> PFsubject;
		    true -> NFsubject
		 end,
	     predicate =
		 if NFpredicate =:= undefined -> PFpredicate;
		    true -> NFpredicate
		 end,
	     object_id =
		 if NFobject_id =:= undefined -> PFobject_id;
		    true -> NFobject_id
		 end,
	     object_value =
		 if PFobject_value /= undefined,
		    NFobject_value /= undefined ->
			merge_msg_Value(PFobject_value, NFobject_value,
					TrUserData);
		    PFobject_value == undefined -> NFobject_value;
		    NFobject_value == undefined -> PFobject_value
		 end,
	     label =
		 if NFlabel =:= undefined -> PFlabel;
		    true -> NFlabel
		 end,
	     lang =
		 if NFlang =:= undefined -> PFlang;
		    true -> NFlang
		 end,
	     facets =
		 if PFfacets /= undefined, NFfacets /= undefined ->
			'erlang_++'(PFfacets, NFfacets, TrUserData);
		    PFfacets == undefined -> NFfacets;
		    NFfacets == undefined -> PFfacets
		 end}.

-compile({nowarn_unused_function,merge_msg_Value/3}).
merge_msg_Value(#'Value'{val = PFval},
		#'Value'{val = NFval}, _) ->
    #'Value'{val =
		 if NFval =:= undefined -> PFval;
		    true -> NFval
		 end}.

-compile({nowarn_unused_function,merge_msg_Facet/3}).
merge_msg_Facet(#'Facet'{key = PFkey, value = PFvalue,
			 val_type = PFval_type, tokens = PFtokens,
			 alias = PFalias},
		#'Facet'{key = NFkey, value = NFvalue,
			 val_type = NFval_type, tokens = NFtokens,
			 alias = NFalias},
		TrUserData) ->
    #'Facet'{key =
		 if NFkey =:= undefined -> PFkey;
		    true -> NFkey
		 end,
	     value =
		 if NFvalue =:= undefined -> PFvalue;
		    true -> NFvalue
		 end,
	     val_type =
		 if NFval_type =:= undefined -> PFval_type;
		    true -> NFval_type
		 end,
	     tokens =
		 if PFtokens /= undefined, NFtokens /= undefined ->
			'erlang_++'(PFtokens, NFtokens, TrUserData);
		    PFtokens == undefined -> NFtokens;
		    NFtokens == undefined -> PFtokens
		 end,
	     alias =
		 if NFalias =:= undefined -> PFalias;
		    true -> NFalias
		 end}.

-compile({nowarn_unused_function,merge_msg_SchemaNode/3}).
merge_msg_SchemaNode(#'SchemaNode'{predicate =
				       PFpredicate,
				   type = PFtype, index = PFindex,
				   tokenizer = PFtokenizer, reverse = PFreverse,
				   count = PFcount, list = PFlist,
				   upsert = PFupsert, lang = PFlang},
		     #'SchemaNode'{predicate = NFpredicate, type = NFtype,
				   index = NFindex, tokenizer = NFtokenizer,
				   reverse = NFreverse, count = NFcount,
				   list = NFlist, upsert = NFupsert,
				   lang = NFlang},
		     TrUserData) ->
    #'SchemaNode'{predicate =
		      if NFpredicate =:= undefined -> PFpredicate;
			 true -> NFpredicate
		      end,
		  type =
		      if NFtype =:= undefined -> PFtype;
			 true -> NFtype
		      end,
		  index =
		      if NFindex =:= undefined -> PFindex;
			 true -> NFindex
		      end,
		  tokenizer =
		      if PFtokenizer /= undefined, NFtokenizer /= undefined ->
			     'erlang_++'(PFtokenizer, NFtokenizer, TrUserData);
			 PFtokenizer == undefined -> NFtokenizer;
			 NFtokenizer == undefined -> PFtokenizer
		      end,
		  reverse =
		      if NFreverse =:= undefined -> PFreverse;
			 true -> NFreverse
		      end,
		  count =
		      if NFcount =:= undefined -> PFcount;
			 true -> NFcount
		      end,
		  list =
		      if NFlist =:= undefined -> PFlist;
			 true -> NFlist
		      end,
		  upsert =
		      if NFupsert =:= undefined -> PFupsert;
			 true -> NFupsert
		      end,
		  lang =
		      if NFlang =:= undefined -> PFlang;
			 true -> NFlang
		      end}.

-compile({nowarn_unused_function,merge_msg_LoginRequest/3}).
merge_msg_LoginRequest(#'LoginRequest'{userid =
					   PFuserid,
				       password = PFpassword,
				       refresh_token = PFrefresh_token},
		       #'LoginRequest'{userid = NFuserid,
				       password = NFpassword,
				       refresh_token = NFrefresh_token},
		       _) ->
    #'LoginRequest'{userid =
			if NFuserid =:= undefined -> PFuserid;
			   true -> NFuserid
			end,
		    password =
			if NFpassword =:= undefined -> PFpassword;
			   true -> NFpassword
			end,
		    refresh_token =
			if NFrefresh_token =:= undefined -> PFrefresh_token;
			   true -> NFrefresh_token
			end}.

-compile({nowarn_unused_function,merge_msg_Jwt/3}).
merge_msg_Jwt(#'Jwt'{access_jwt = PFaccess_jwt,
		     refresh_jwt = PFrefresh_jwt},
	      #'Jwt'{access_jwt = NFaccess_jwt,
		     refresh_jwt = NFrefresh_jwt},
	      _) ->
    #'Jwt'{access_jwt =
	       if NFaccess_jwt =:= undefined -> PFaccess_jwt;
		  true -> NFaccess_jwt
	       end,
	   refresh_jwt =
	       if NFrefresh_jwt =:= undefined -> PFrefresh_jwt;
		  true -> NFrefresh_jwt
	       end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Request' -> v_msg_Request(Msg, [MsgName], TrUserData);
      'Response' ->
	  v_msg_Response(Msg, [MsgName], TrUserData);
      'Assigned' ->
	  v_msg_Assigned(Msg, [MsgName], TrUserData);
      'Mutation' ->
	  v_msg_Mutation(Msg, [MsgName], TrUserData);
      'Operation' ->
	  v_msg_Operation(Msg, [MsgName], TrUserData);
      'Payload' -> v_msg_Payload(Msg, [MsgName], TrUserData);
      'TxnContext' ->
	  v_msg_TxnContext(Msg, [MsgName], TrUserData);
      'Check' -> v_msg_Check(Msg, [MsgName], TrUserData);
      'Version' -> v_msg_Version(Msg, [MsgName], TrUserData);
      'LinRead' -> v_msg_LinRead(Msg, [MsgName], TrUserData);
      'Latency' -> v_msg_Latency(Msg, [MsgName], TrUserData);
      'NQuad' -> v_msg_NQuad(Msg, [MsgName], TrUserData);
      'Value' -> v_msg_Value(Msg, [MsgName], TrUserData);
      'Facet' -> v_msg_Facet(Msg, [MsgName], TrUserData);
      'SchemaNode' ->
	  v_msg_SchemaNode(Msg, [MsgName], TrUserData);
      'LoginRequest' ->
	  v_msg_LoginRequest(Msg, [MsgName], TrUserData);
      'Jwt' -> v_msg_Jwt(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Request/3}).
-dialyzer({nowarn_function,v_msg_Request/3}).
v_msg_Request(#'Request'{query = F1, vars = F2,
			 start_ts = F3, lin_read = F4, read_only = F5,
			 best_effort = F6},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [query | Path], TrUserData)
    end,
    'v_map<string,string>'(F2, [vars | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [start_ts | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_LinRead(F4, [lin_read | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [read_only | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_bool(F6, [best_effort | Path], TrUserData)
    end,
    ok;
v_msg_Request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Request'}, X, Path).

-compile({nowarn_unused_function,v_msg_Response/3}).
-dialyzer({nowarn_function,v_msg_Response/3}).
v_msg_Response(#'Response'{json = F1, schema = F2,
			   txn = F3, latency = F4},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [json | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_msg_SchemaNode(Elem, [schema | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'SchemaNode'}},
			 F2, [schema | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_msg_TxnContext(F3, [txn | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_Latency(F4, [latency | Path], TrUserData)
    end,
    ok;
v_msg_Response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Response'}, X, Path).

-compile({nowarn_unused_function,v_msg_Assigned/3}).
-dialyzer({nowarn_function,v_msg_Assigned/3}).
v_msg_Assigned(#'Assigned'{uids = F1, context = F2,
			   latency = F3},
	       Path, TrUserData) ->
    'v_map<string,string>'(F1, [uids | Path], TrUserData),
    if F2 == undefined -> ok;
       true ->
	   v_msg_TxnContext(F2, [context | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_Latency(F3, [latency | Path], TrUserData)
    end,
    ok;
v_msg_Assigned(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Assigned'}, X, Path).

-compile({nowarn_unused_function,v_msg_Mutation/3}).
-dialyzer({nowarn_function,v_msg_Mutation/3}).
v_msg_Mutation(#'Mutation'{set_json = F1,
			   delete_json = F2, set_nquads = F3, del_nquads = F4,
			   query = F5, set = F6, del = F7, start_ts = F8,
			   commit_now = F9, ignore_index_conflict = F10},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [set_json | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_bytes(F2, [delete_json | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_bytes(F3, [set_nquads | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_bytes(F4, [del_nquads | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [query | Path], TrUserData)
    end,
    if is_list(F6) ->
	   _ = [v_msg_NQuad(Elem, [set | Path], TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'NQuad'}}, F6,
			 [set | Path])
    end,
    if is_list(F7) ->
	   _ = [v_msg_NQuad(Elem, [del | Path], TrUserData)
		|| Elem <- F7],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'NQuad'}}, F7,
			 [del | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint64(F8, [start_ts | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [commit_now | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
	   v_type_bool(F10, [ignore_index_conflict | Path],
		       TrUserData)
    end,
    ok;
v_msg_Mutation(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Mutation'}, X, Path).

-compile({nowarn_unused_function,v_msg_Operation/3}).
-dialyzer({nowarn_function,v_msg_Operation/3}).
v_msg_Operation(#'Operation'{schema = F1,
			     drop_attr = F2, drop_all = F3, drop_op = F4,
			     drop_value = F5},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [schema | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [drop_attr | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [drop_all | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_enum_Operation.DropOp'(F4, [drop_op | Path],
				     TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [drop_value | Path], TrUserData)
    end,
    ok;
v_msg_Operation(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Operation'}, X, Path).

-compile({nowarn_unused_function,v_msg_Payload/3}).
-dialyzer({nowarn_function,v_msg_Payload/3}).
v_msg_Payload(#'Payload'{'Data' = F1}, Path,
	      TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, ['Data' | Path], TrUserData)
    end,
    ok;
v_msg_Payload(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Payload'}, X, Path).

-compile({nowarn_unused_function,v_msg_TxnContext/3}).
-dialyzer({nowarn_function,v_msg_TxnContext/3}).
v_msg_TxnContext(#'TxnContext'{start_ts = F1,
			       commit_ts = F2, aborted = F3, keys = F4,
			       preds = F5, lin_read = F6},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [start_ts | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_uint64(F2, [commit_ts | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [aborted | Path], TrUserData)
    end,
    if is_list(F4) ->
	   _ = [v_type_string(Elem, [keys | Path], TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F4,
			 [keys | Path])
    end,
    if is_list(F5) ->
	   _ = [v_type_string(Elem, [preds | Path], TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F5,
			 [preds | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_msg_LinRead(F6, [lin_read | Path], TrUserData)
    end,
    ok;
v_msg_TxnContext(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TxnContext'}, X, Path).

-compile({nowarn_unused_function,v_msg_Check/3}).
-dialyzer({nowarn_function,v_msg_Check/3}).
v_msg_Check(#'Check'{}, _Path, _) -> ok;
v_msg_Check(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Check'}, X, Path).

-compile({nowarn_unused_function,v_msg_Version/3}).
-dialyzer({nowarn_function,v_msg_Version/3}).
v_msg_Version(#'Version'{tag = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [tag | Path], TrUserData)
    end,
    ok;
v_msg_Version(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Version'}, X, Path).

-compile({nowarn_unused_function,v_msg_LinRead/3}).
-dialyzer({nowarn_function,v_msg_LinRead/3}).
v_msg_LinRead(#'LinRead'{ids = F1, sequencing = F2},
	      Path, TrUserData) ->
    'v_map<uint32,uint64>'(F1, [ids | Path], TrUserData),
    if F2 == undefined -> ok;
       true ->
	   'v_enum_LinRead.Sequencing'(F2, [sequencing | Path],
				       TrUserData)
    end,
    ok;
v_msg_LinRead(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LinRead'}, X, Path).

-compile({nowarn_unused_function,v_msg_Latency/3}).
-dialyzer({nowarn_function,v_msg_Latency/3}).
v_msg_Latency(#'Latency'{parsing_ns = F1,
			 processing_ns = F2, encoding_ns = F3},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_uint64(F1, [parsing_ns | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_uint64(F2, [processing_ns | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_uint64(F3, [encoding_ns | Path], TrUserData)
    end,
    ok;
v_msg_Latency(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Latency'}, X, Path).

-compile({nowarn_unused_function,v_msg_NQuad/3}).
-dialyzer({nowarn_function,v_msg_NQuad/3}).
v_msg_NQuad(#'NQuad'{subject = F1, predicate = F2,
		     object_id = F3, object_value = F4, label = F5,
		     lang = F6, facets = F7},
	    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [subject | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [predicate | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [object_id | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_Value(F4, [object_value | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [label | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [lang | Path], TrUserData)
    end,
    if is_list(F7) ->
	   _ = [v_msg_Facet(Elem, [facets | Path], TrUserData)
		|| Elem <- F7],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Facet'}}, F7,
			 [facets | Path])
    end,
    ok;
v_msg_NQuad(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'NQuad'}, X, Path).

-compile({nowarn_unused_function,v_msg_Value/3}).
-dialyzer({nowarn_function,v_msg_Value/3}).
v_msg_Value(#'Value'{val = F1}, Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {default_val, OF1} ->
	  v_type_string(OF1, [default_val, val | Path],
			TrUserData);
      {bytes_val, OF1} ->
	  v_type_bytes(OF1, [bytes_val, val | Path], TrUserData);
      {int_val, OF1} ->
	  v_type_int64(OF1, [int_val, val | Path], TrUserData);
      {bool_val, OF1} ->
	  v_type_bool(OF1, [bool_val, val | Path], TrUserData);
      {str_val, OF1} ->
	  v_type_string(OF1, [str_val, val | Path], TrUserData);
      {double_val, OF1} ->
	  v_type_double(OF1, [double_val, val | Path],
			TrUserData);
      {geo_val, OF1} ->
	  v_type_bytes(OF1, [geo_val, val | Path], TrUserData);
      {date_val, OF1} ->
	  v_type_bytes(OF1, [date_val, val | Path], TrUserData);
      {datetime_val, OF1} ->
	  v_type_bytes(OF1, [datetime_val, val | Path],
		       TrUserData);
      {password_val, OF1} ->
	  v_type_string(OF1, [password_val, val | Path],
			TrUserData);
      {uid_val, OF1} ->
	  v_type_uint64(OF1, [uid_val, val | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [val | Path])
    end,
    ok;
v_msg_Value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Value'}, X, Path).

-compile({nowarn_unused_function,v_msg_Facet/3}).
-dialyzer({nowarn_function,v_msg_Facet/3}).
v_msg_Facet(#'Facet'{key = F1, value = F2,
		     val_type = F3, tokens = F4, alias = F5},
	    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [value | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_enum_Facet.ValType'(F3, [val_type | Path],
				  TrUserData)
    end,
    if is_list(F4) ->
	   _ = [v_type_string(Elem, [tokens | Path], TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F4,
			 [tokens | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [alias | Path], TrUserData)
    end,
    ok;
v_msg_Facet(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Facet'}, X, Path).

-compile({nowarn_unused_function,v_msg_SchemaNode/3}).
-dialyzer({nowarn_function,v_msg_SchemaNode/3}).
v_msg_SchemaNode(#'SchemaNode'{predicate = F1,
			       type = F2, index = F3, tokenizer = F4,
			       reverse = F5, count = F6, list = F7, upsert = F8,
			       lang = F9},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [predicate | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [type | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [index | Path], TrUserData)
    end,
    if is_list(F4) ->
	   _ = [v_type_string(Elem, [tokenizer | Path], TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F4,
			 [tokenizer | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [reverse | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [count | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [list | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [upsert | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [lang | Path], TrUserData)
    end,
    ok;
v_msg_SchemaNode(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SchemaNode'}, X, Path).

-compile({nowarn_unused_function,v_msg_LoginRequest/3}).
-dialyzer({nowarn_function,v_msg_LoginRequest/3}).
v_msg_LoginRequest(#'LoginRequest'{userid = F1,
				   password = F2, refresh_token = F3},
		   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [userid | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [password | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [refresh_token | Path], TrUserData)
    end,
    ok;
v_msg_LoginRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LoginRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_Jwt/3}).
-dialyzer({nowarn_function,v_msg_Jwt/3}).
v_msg_Jwt(#'Jwt'{access_jwt = F1, refresh_jwt = F2},
	  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [access_jwt | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [refresh_jwt | Path], TrUserData)
    end,
    ok;
v_msg_Jwt(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Jwt'}, X, Path).

-compile({nowarn_unused_function,'v_enum_Operation.DropOp'/3}).
-dialyzer({nowarn_function,'v_enum_Operation.DropOp'/3}).
'v_enum_Operation.DropOp'('NONE', _Path, _TrUserData) ->
    ok;
'v_enum_Operation.DropOp'('ALL', _Path, _TrUserData) ->
    ok;
'v_enum_Operation.DropOp'('DATA', _Path, _TrUserData) ->
    ok;
'v_enum_Operation.DropOp'('ATTR', _Path, _TrUserData) ->
    ok;
'v_enum_Operation.DropOp'('TYPE', _Path, _TrUserData) ->
    ok;
'v_enum_Operation.DropOp'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Operation.DropOp'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Operation.DropOp'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_LinRead.Sequencing'/3}).
-dialyzer({nowarn_function,'v_enum_LinRead.Sequencing'/3}).
'v_enum_LinRead.Sequencing'('CLIENT_SIDE', _Path,
			    _TrUserData) ->
    ok;
'v_enum_LinRead.Sequencing'('SERVER_SIDE', _Path,
			    _TrUserData) ->
    ok;
'v_enum_LinRead.Sequencing'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_LinRead.Sequencing'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'LinRead.Sequencing'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_Facet.ValType'/3}).
-dialyzer({nowarn_function,'v_enum_Facet.ValType'/3}).
'v_enum_Facet.ValType'('STRING', _Path, _TrUserData) ->
    ok;
'v_enum_Facet.ValType'('INT', _Path, _TrUserData) -> ok;
'v_enum_Facet.ValType'('FLOAT', _Path, _TrUserData) ->
    ok;
'v_enum_Facet.ValType'('BOOL', _Path, _TrUserData) ->
    ok;
'v_enum_Facet.ValType'('DATETIME', _Path,
		       _TrUserData) ->
    ok;
'v_enum_Facet.ValType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Facet.ValType'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Facet.ValType'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,'v_map<uint32,uint64>'/3}).
-dialyzer({nowarn_function,'v_map<uint32,uint64>'/3}).
'v_map<uint32,uint64>'(KVs, Path, TrUserData)
    when is_list(KVs) ->
    [case X of
       {Key, Value} ->
	   v_type_uint32(Key, [key | Path], TrUserData),
	   v_type_uint64(Value, [value | Path], TrUserData);
       _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<uint32,uint64>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_list_of_key_value_tuples, X,
		  Path).

-compile({nowarn_unused_function,'v_map<string,string>'/3}).
-dialyzer({nowarn_function,'v_map<string,string>'/3}).
'v_map<string,string>'(KVs, Path, TrUserData)
    when is_list(KVs) ->
    [case X of
       {Key, Value} ->
	   v_type_string(Key, [key | Path], TrUserData),
	   v_type_string(Value, [value | Path], TrUserData);
       _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<string,string>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_list_of_key_value_tuples, X,
		  Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_Request.vars'/2}).
'tr_decode_init_default_Request.vars'(_, _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_Request.vars'/3}).
'tr_merge_Request.vars'(X1, X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_Request.vars'/2}).
'tr_decode_repeated_finalize_Request.vars'(L, _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_Request.vars'/3}).
'tr_decode_repeated_add_elem_Request.vars'(Elem, L,
					   _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_init_default_Assigned.uids'/2}).
'tr_decode_init_default_Assigned.uids'(_, _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_Assigned.uids'/3}).
'tr_merge_Assigned.uids'(X1, X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_Assigned.uids'/2}).
'tr_decode_repeated_finalize_Assigned.uids'(L, _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_Assigned.uids'/3}).
'tr_decode_repeated_add_elem_Assigned.uids'(Elem, L,
					    _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_init_default_LinRead.ids'/2}).
'tr_decode_init_default_LinRead.ids'(_, _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_LinRead.ids'/3}).
'tr_merge_LinRead.ids'(X1, X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_LinRead.ids'/2}).
'tr_decode_repeated_finalize_LinRead.ids'(L, _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_LinRead.ids'/3}).
'tr_decode_repeated_add_elem_LinRead.ids'(Elem, L, _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_encode_Request.vars[x]'/2}).
'tr_encode_Request.vars[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,'tr_encode_Assigned.uids[x]'/2}).
'tr_encode_Assigned.uids[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,'tr_encode_LinRead.ids[x]'/2}).
'tr_encode_LinRead.ids[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<uint32,uint64>').

-compile({inline,mt_maptuple_to_pseudomsg_r/2}).
mt_maptuple_to_pseudomsg_r({K, V}, RName) ->
    {RName, K, V}.


-compile({inline,mt_empty_map_r/0}).
mt_empty_map_r() -> dict:new().

-compile({inline,mt_add_item_r/2}).
mt_add_item_r({_RName, K, V}, D) -> dict:store(K, V, D).


-compile({inline,mt_finalize_items_r/1}).
mt_finalize_items_r(D) -> dict:to_list(D).


-compile({inline,mt_merge_maptuples_r/2}).
mt_merge_maptuples_r(L1, L2) ->
    dict:to_list(dict:merge(fun (_Key, _V1, V2) -> V2 end,
			    dict:from_list(L1), dict:from_list(L2))).



get_msg_defs() ->
    [{{enum, 'Operation.DropOp'},
      [{'NONE', 0}, {'ALL', 1}, {'DATA', 2}, {'ATTR', 3},
       {'TYPE', 4}]},
     {{enum, 'LinRead.Sequencing'},
      [{'CLIENT_SIDE', 0}, {'SERVER_SIDE', 1}]},
     {{enum, 'Facet.ValType'},
      [{'STRING', 0}, {'INT', 1}, {'FLOAT', 2}, {'BOOL', 3},
       {'DATETIME', 4}]},
     {{msg, 'Request'},
      [#field{name = query, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = vars, fnum = 2, rnum = 3,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []},
       #field{name = start_ts, fnum = 13, rnum = 4,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = lin_read, fnum = 14, rnum = 5,
	      type = {msg, 'LinRead'}, occurrence = optional,
	      opts = []},
       #field{name = read_only, fnum = 15, rnum = 6,
	      type = bool, occurrence = optional, opts = []},
       #field{name = best_effort, fnum = 16, rnum = 7,
	      type = bool, occurrence = optional, opts = []}]},
     {{msg, 'Response'},
      [#field{name = json, fnum = 1, rnum = 2, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = schema, fnum = 2, rnum = 3,
	      type = {msg, 'SchemaNode'}, occurrence = repeated,
	      opts = [deprecated]},
       #field{name = txn, fnum = 3, rnum = 4,
	      type = {msg, 'TxnContext'}, occurrence = optional,
	      opts = []},
       #field{name = latency, fnum = 12, rnum = 5,
	      type = {msg, 'Latency'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Assigned'},
      [#field{name = uids, fnum = 1, rnum = 2,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []},
       #field{name = context, fnum = 2, rnum = 3,
	      type = {msg, 'TxnContext'}, occurrence = optional,
	      opts = []},
       #field{name = latency, fnum = 12, rnum = 4,
	      type = {msg, 'Latency'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Mutation'},
      [#field{name = set_json, fnum = 1, rnum = 2,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = delete_json, fnum = 2, rnum = 3,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = set_nquads, fnum = 3, rnum = 4,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = del_nquads, fnum = 4, rnum = 5,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = query, fnum = 5, rnum = 6, type = string,
	      occurrence = optional, opts = []},
       #field{name = set, fnum = 10, rnum = 7,
	      type = {msg, 'NQuad'}, occurrence = repeated,
	      opts = []},
       #field{name = del, fnum = 11, rnum = 8,
	      type = {msg, 'NQuad'}, occurrence = repeated,
	      opts = []},
       #field{name = start_ts, fnum = 13, rnum = 9,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = commit_now, fnum = 14, rnum = 10,
	      type = bool, occurrence = optional, opts = []},
       #field{name = ignore_index_conflict, fnum = 15,
	      rnum = 11, type = bool, occurrence = optional,
	      opts = []}]},
     {{msg, 'Operation'},
      [#field{name = schema, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = drop_attr, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = drop_all, fnum = 3, rnum = 4, type = bool,
	      occurrence = optional, opts = []},
       #field{name = drop_op, fnum = 4, rnum = 5,
	      type = {enum, 'Operation.DropOp'},
	      occurrence = optional, opts = []},
       #field{name = drop_value, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Payload'},
      [#field{name = 'Data', fnum = 1, rnum = 2, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'TxnContext'},
      [#field{name = start_ts, fnum = 1, rnum = 2,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = commit_ts, fnum = 2, rnum = 3,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = aborted, fnum = 3, rnum = 4, type = bool,
	      occurrence = optional, opts = []},
       #field{name = keys, fnum = 4, rnum = 5, type = string,
	      occurrence = repeated, opts = []},
       #field{name = preds, fnum = 5, rnum = 6, type = string,
	      occurrence = repeated, opts = []},
       #field{name = lin_read, fnum = 13, rnum = 7,
	      type = {msg, 'LinRead'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Check'}, []},
     {{msg, 'Version'},
      [#field{name = tag, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'LinRead'},
      [#field{name = ids, fnum = 1, rnum = 2,
	      type = {map, uint32, uint64}, occurrence = repeated,
	      opts = []},
       #field{name = sequencing, fnum = 2, rnum = 3,
	      type = {enum, 'LinRead.Sequencing'},
	      occurrence = optional, opts = []}]},
     {{msg, 'Latency'},
      [#field{name = parsing_ns, fnum = 1, rnum = 2,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = processing_ns, fnum = 2, rnum = 3,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = encoding_ns, fnum = 3, rnum = 4,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'NQuad'},
      [#field{name = subject, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = predicate, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = object_id, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = object_value, fnum = 4, rnum = 5,
	      type = {msg, 'Value'}, occurrence = optional,
	      opts = []},
       #field{name = label, fnum = 5, rnum = 6, type = string,
	      occurrence = optional, opts = []},
       #field{name = lang, fnum = 6, rnum = 7, type = string,
	      occurrence = optional, opts = []},
       #field{name = facets, fnum = 7, rnum = 8,
	      type = {msg, 'Facet'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Value'},
      [#gpb_oneof{name = val, rnum = 2,
		  fields =
		      [#field{name = default_val, fnum = 1, rnum = 2,
			      type = string, occurrence = optional, opts = []},
		       #field{name = bytes_val, fnum = 2, rnum = 2,
			      type = bytes, occurrence = optional, opts = []},
		       #field{name = int_val, fnum = 3, rnum = 2, type = int64,
			      occurrence = optional, opts = []},
		       #field{name = bool_val, fnum = 4, rnum = 2, type = bool,
			      occurrence = optional, opts = []},
		       #field{name = str_val, fnum = 5, rnum = 2,
			      type = string, occurrence = optional, opts = []},
		       #field{name = double_val, fnum = 6, rnum = 2,
			      type = double, occurrence = optional, opts = []},
		       #field{name = geo_val, fnum = 7, rnum = 2, type = bytes,
			      occurrence = optional, opts = []},
		       #field{name = date_val, fnum = 8, rnum = 2,
			      type = bytes, occurrence = optional, opts = []},
		       #field{name = datetime_val, fnum = 9, rnum = 2,
			      type = bytes, occurrence = optional, opts = []},
		       #field{name = password_val, fnum = 10, rnum = 2,
			      type = string, occurrence = optional, opts = []},
		       #field{name = uid_val, fnum = 11, rnum = 2,
			      type = uint64, occurrence = optional,
			      opts = []}]}]},
     {{msg, 'Facet'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = val_type, fnum = 3, rnum = 4,
	      type = {enum, 'Facet.ValType'}, occurrence = optional,
	      opts = []},
       #field{name = tokens, fnum = 4, rnum = 5, type = string,
	      occurrence = repeated, opts = []},
       #field{name = alias, fnum = 5, rnum = 6, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'SchemaNode'},
      [#field{name = predicate, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = type, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = index, fnum = 3, rnum = 4, type = bool,
	      occurrence = optional, opts = []},
       #field{name = tokenizer, fnum = 4, rnum = 5,
	      type = string, occurrence = repeated, opts = []},
       #field{name = reverse, fnum = 5, rnum = 6, type = bool,
	      occurrence = optional, opts = []},
       #field{name = count, fnum = 6, rnum = 7, type = bool,
	      occurrence = optional, opts = []},
       #field{name = list, fnum = 7, rnum = 8, type = bool,
	      occurrence = optional, opts = []},
       #field{name = upsert, fnum = 8, rnum = 9, type = bool,
	      occurrence = optional, opts = []},
       #field{name = lang, fnum = 9, rnum = 10, type = bool,
	      occurrence = optional, opts = []}]},
     {{msg, 'LoginRequest'},
      [#field{name = userid, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = refresh_token, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Jwt'},
      [#field{name = access_jwt, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = refresh_jwt, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['Request', 'Response', 'Assigned', 'Mutation',
     'Operation', 'Payload', 'TxnContext', 'Check',
     'Version', 'LinRead', 'Latency', 'NQuad', 'Value',
     'Facet', 'SchemaNode', 'LoginRequest', 'Jwt'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Request', 'Response', 'Assigned', 'Mutation',
     'Operation', 'Payload', 'TxnContext', 'Check',
     'Version', 'LinRead', 'Latency', 'NQuad', 'Value',
     'Facet', 'SchemaNode', 'LoginRequest', 'Jwt'].


get_enum_names() ->
    ['Operation.DropOp', 'LinRead.Sequencing',
     'Facet.ValType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Request') ->
    [#field{name = query, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = vars, fnum = 2, rnum = 3,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []},
     #field{name = start_ts, fnum = 13, rnum = 4,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = lin_read, fnum = 14, rnum = 5,
	    type = {msg, 'LinRead'}, occurrence = optional,
	    opts = []},
     #field{name = read_only, fnum = 15, rnum = 6,
	    type = bool, occurrence = optional, opts = []},
     #field{name = best_effort, fnum = 16, rnum = 7,
	    type = bool, occurrence = optional, opts = []}];
find_msg_def('Response') ->
    [#field{name = json, fnum = 1, rnum = 2, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = schema, fnum = 2, rnum = 3,
	    type = {msg, 'SchemaNode'}, occurrence = repeated,
	    opts = [deprecated]},
     #field{name = txn, fnum = 3, rnum = 4,
	    type = {msg, 'TxnContext'}, occurrence = optional,
	    opts = []},
     #field{name = latency, fnum = 12, rnum = 5,
	    type = {msg, 'Latency'}, occurrence = optional,
	    opts = []}];
find_msg_def('Assigned') ->
    [#field{name = uids, fnum = 1, rnum = 2,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []},
     #field{name = context, fnum = 2, rnum = 3,
	    type = {msg, 'TxnContext'}, occurrence = optional,
	    opts = []},
     #field{name = latency, fnum = 12, rnum = 4,
	    type = {msg, 'Latency'}, occurrence = optional,
	    opts = []}];
find_msg_def('Mutation') ->
    [#field{name = set_json, fnum = 1, rnum = 2,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = delete_json, fnum = 2, rnum = 3,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = set_nquads, fnum = 3, rnum = 4,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = del_nquads, fnum = 4, rnum = 5,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = query, fnum = 5, rnum = 6, type = string,
	    occurrence = optional, opts = []},
     #field{name = set, fnum = 10, rnum = 7,
	    type = {msg, 'NQuad'}, occurrence = repeated,
	    opts = []},
     #field{name = del, fnum = 11, rnum = 8,
	    type = {msg, 'NQuad'}, occurrence = repeated,
	    opts = []},
     #field{name = start_ts, fnum = 13, rnum = 9,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = commit_now, fnum = 14, rnum = 10,
	    type = bool, occurrence = optional, opts = []},
     #field{name = ignore_index_conflict, fnum = 15,
	    rnum = 11, type = bool, occurrence = optional,
	    opts = []}];
find_msg_def('Operation') ->
    [#field{name = schema, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = drop_attr, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = drop_all, fnum = 3, rnum = 4, type = bool,
	    occurrence = optional, opts = []},
     #field{name = drop_op, fnum = 4, rnum = 5,
	    type = {enum, 'Operation.DropOp'},
	    occurrence = optional, opts = []},
     #field{name = drop_value, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Payload') ->
    [#field{name = 'Data', fnum = 1, rnum = 2, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('TxnContext') ->
    [#field{name = start_ts, fnum = 1, rnum = 2,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = commit_ts, fnum = 2, rnum = 3,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = aborted, fnum = 3, rnum = 4, type = bool,
	    occurrence = optional, opts = []},
     #field{name = keys, fnum = 4, rnum = 5, type = string,
	    occurrence = repeated, opts = []},
     #field{name = preds, fnum = 5, rnum = 6, type = string,
	    occurrence = repeated, opts = []},
     #field{name = lin_read, fnum = 13, rnum = 7,
	    type = {msg, 'LinRead'}, occurrence = optional,
	    opts = []}];
find_msg_def('Check') -> [];
find_msg_def('Version') ->
    [#field{name = tag, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('LinRead') ->
    [#field{name = ids, fnum = 1, rnum = 2,
	    type = {map, uint32, uint64}, occurrence = repeated,
	    opts = []},
     #field{name = sequencing, fnum = 2, rnum = 3,
	    type = {enum, 'LinRead.Sequencing'},
	    occurrence = optional, opts = []}];
find_msg_def('Latency') ->
    [#field{name = parsing_ns, fnum = 1, rnum = 2,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = processing_ns, fnum = 2, rnum = 3,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = encoding_ns, fnum = 3, rnum = 4,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def('NQuad') ->
    [#field{name = subject, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = predicate, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = object_id, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = object_value, fnum = 4, rnum = 5,
	    type = {msg, 'Value'}, occurrence = optional,
	    opts = []},
     #field{name = label, fnum = 5, rnum = 6, type = string,
	    occurrence = optional, opts = []},
     #field{name = lang, fnum = 6, rnum = 7, type = string,
	    occurrence = optional, opts = []},
     #field{name = facets, fnum = 7, rnum = 8,
	    type = {msg, 'Facet'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Value') ->
    [#gpb_oneof{name = val, rnum = 2,
		fields =
		    [#field{name = default_val, fnum = 1, rnum = 2,
			    type = string, occurrence = optional, opts = []},
		     #field{name = bytes_val, fnum = 2, rnum = 2,
			    type = bytes, occurrence = optional, opts = []},
		     #field{name = int_val, fnum = 3, rnum = 2, type = int64,
			    occurrence = optional, opts = []},
		     #field{name = bool_val, fnum = 4, rnum = 2, type = bool,
			    occurrence = optional, opts = []},
		     #field{name = str_val, fnum = 5, rnum = 2,
			    type = string, occurrence = optional, opts = []},
		     #field{name = double_val, fnum = 6, rnum = 2,
			    type = double, occurrence = optional, opts = []},
		     #field{name = geo_val, fnum = 7, rnum = 2, type = bytes,
			    occurrence = optional, opts = []},
		     #field{name = date_val, fnum = 8, rnum = 2,
			    type = bytes, occurrence = optional, opts = []},
		     #field{name = datetime_val, fnum = 9, rnum = 2,
			    type = bytes, occurrence = optional, opts = []},
		     #field{name = password_val, fnum = 10, rnum = 2,
			    type = string, occurrence = optional, opts = []},
		     #field{name = uid_val, fnum = 11, rnum = 2,
			    type = uint64, occurrence = optional, opts = []}]}];
find_msg_def('Facet') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = val_type, fnum = 3, rnum = 4,
	    type = {enum, 'Facet.ValType'}, occurrence = optional,
	    opts = []},
     #field{name = tokens, fnum = 4, rnum = 5, type = string,
	    occurrence = repeated, opts = []},
     #field{name = alias, fnum = 5, rnum = 6, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('SchemaNode') ->
    [#field{name = predicate, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = type, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = index, fnum = 3, rnum = 4, type = bool,
	    occurrence = optional, opts = []},
     #field{name = tokenizer, fnum = 4, rnum = 5,
	    type = string, occurrence = repeated, opts = []},
     #field{name = reverse, fnum = 5, rnum = 6, type = bool,
	    occurrence = optional, opts = []},
     #field{name = count, fnum = 6, rnum = 7, type = bool,
	    occurrence = optional, opts = []},
     #field{name = list, fnum = 7, rnum = 8, type = bool,
	    occurrence = optional, opts = []},
     #field{name = upsert, fnum = 8, rnum = 9, type = bool,
	    occurrence = optional, opts = []},
     #field{name = lang, fnum = 9, rnum = 10, type = bool,
	    occurrence = optional, opts = []}];
find_msg_def('LoginRequest') ->
    [#field{name = userid, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = refresh_token, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Jwt') ->
    [#field{name = access_jwt, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = refresh_jwt, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('Operation.DropOp') ->
    [{'NONE', 0}, {'ALL', 1}, {'DATA', 2}, {'ATTR', 3},
     {'TYPE', 4}];
find_enum_def('LinRead.Sequencing') ->
    [{'CLIENT_SIDE', 0}, {'SERVER_SIDE', 1}];
find_enum_def('Facet.ValType') ->
    [{'STRING', 0}, {'INT', 1}, {'FLOAT', 2}, {'BOOL', 3},
     {'DATETIME', 4}];
find_enum_def(_) -> error.


enum_symbol_by_value('Operation.DropOp', Value) ->
    'enum_symbol_by_value_Operation.DropOp'(Value);
enum_symbol_by_value('LinRead.Sequencing', Value) ->
    'enum_symbol_by_value_LinRead.Sequencing'(Value);
enum_symbol_by_value('Facet.ValType', Value) ->
    'enum_symbol_by_value_Facet.ValType'(Value).


enum_value_by_symbol('Operation.DropOp', Sym) ->
    'enum_value_by_symbol_Operation.DropOp'(Sym);
enum_value_by_symbol('LinRead.Sequencing', Sym) ->
    'enum_value_by_symbol_LinRead.Sequencing'(Sym);
enum_value_by_symbol('Facet.ValType', Sym) ->
    'enum_value_by_symbol_Facet.ValType'(Sym).


'enum_symbol_by_value_Operation.DropOp'(0) -> 'NONE';
'enum_symbol_by_value_Operation.DropOp'(1) -> 'ALL';
'enum_symbol_by_value_Operation.DropOp'(2) -> 'DATA';
'enum_symbol_by_value_Operation.DropOp'(3) -> 'ATTR';
'enum_symbol_by_value_Operation.DropOp'(4) -> 'TYPE'.


'enum_value_by_symbol_Operation.DropOp'('NONE') -> 0;
'enum_value_by_symbol_Operation.DropOp'('ALL') -> 1;
'enum_value_by_symbol_Operation.DropOp'('DATA') -> 2;
'enum_value_by_symbol_Operation.DropOp'('ATTR') -> 3;
'enum_value_by_symbol_Operation.DropOp'('TYPE') -> 4.

'enum_symbol_by_value_LinRead.Sequencing'(0) ->
    'CLIENT_SIDE';
'enum_symbol_by_value_LinRead.Sequencing'(1) ->
    'SERVER_SIDE'.


'enum_value_by_symbol_LinRead.Sequencing'('CLIENT_SIDE') ->
    0;
'enum_value_by_symbol_LinRead.Sequencing'('SERVER_SIDE') ->
    1.

'enum_symbol_by_value_Facet.ValType'(0) -> 'STRING';
'enum_symbol_by_value_Facet.ValType'(1) -> 'INT';
'enum_symbol_by_value_Facet.ValType'(2) -> 'FLOAT';
'enum_symbol_by_value_Facet.ValType'(3) -> 'BOOL';
'enum_symbol_by_value_Facet.ValType'(4) -> 'DATETIME'.


'enum_value_by_symbol_Facet.ValType'('STRING') -> 0;
'enum_value_by_symbol_Facet.ValType'('INT') -> 1;
'enum_value_by_symbol_Facet.ValType'('FLOAT') -> 2;
'enum_value_by_symbol_Facet.ValType'('BOOL') -> 3;
'enum_value_by_symbol_Facet.ValType'('DATETIME') -> 4.


get_service_names() -> ['Dgraph'].


get_service_def('Dgraph') ->
    {{service, 'Dgraph'},
     [#rpc{name = 'Login', input = 'LoginRequest',
	   output = 'Response', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'Query', input = 'Request',
	   output = 'Response', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'Mutate', input = 'Mutation',
	   output = 'Assigned', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'Alter', input = 'Operation',
	   output = 'Payload', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'CommitOrAbort', input = 'TxnContext',
	   output = 'TxnContext', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'CheckVersion', input = 'Check',
	   output = 'Version', input_stream = false,
	   output_stream = false, opts = []}]};
get_service_def(_) -> error.


get_rpc_names('Dgraph') ->
    ['Login', 'Query', 'Mutate', 'Alter', 'CommitOrAbort',
     'CheckVersion'];
get_rpc_names(_) -> error.


find_rpc_def('Dgraph', RpcName) ->
    find_rpc_def_Dgraph(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_Dgraph('Login') ->
    #rpc{name = 'Login', input = 'LoginRequest',
	 output = 'Response', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_Dgraph('Query') ->
    #rpc{name = 'Query', input = 'Request',
	 output = 'Response', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_Dgraph('Mutate') ->
    #rpc{name = 'Mutate', input = 'Mutation',
	 output = 'Assigned', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_Dgraph('Alter') ->
    #rpc{name = 'Alter', input = 'Operation',
	 output = 'Payload', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_Dgraph('CommitOrAbort') ->
    #rpc{name = 'CommitOrAbort', input = 'TxnContext',
	 output = 'TxnContext', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_Dgraph('CheckVersion') ->
    #rpc{name = 'CheckVersion', input = 'Check',
	 output = 'Version', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_Dgraph(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_tuple(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"api.Dgraph">>) -> 'Dgraph';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('Dgraph') -> <<"api.Dgraph">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"api.Dgraph">>, <<"Login">>) ->
    {'Dgraph', 'Login'};
fqbins_to_service_and_rpc_name(<<"api.Dgraph">>, <<"Query">>) ->
    {'Dgraph', 'Query'};
fqbins_to_service_and_rpc_name(<<"api.Dgraph">>, <<"Mutate">>) ->
    {'Dgraph', 'Mutate'};
fqbins_to_service_and_rpc_name(<<"api.Dgraph">>, <<"Alter">>) ->
    {'Dgraph', 'Alter'};
fqbins_to_service_and_rpc_name(<<"api.Dgraph">>, <<"CommitOrAbort">>) ->
    {'Dgraph', 'CommitOrAbort'};
fqbins_to_service_and_rpc_name(<<"api.Dgraph">>, <<"CheckVersion">>) ->
    {'Dgraph', 'CheckVersion'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('Dgraph', 'Login') ->
    {<<"api.Dgraph">>, <<"Login">>};
service_and_rpc_name_to_fqbins('Dgraph', 'Query') ->
    {<<"api.Dgraph">>, <<"Query">>};
service_and_rpc_name_to_fqbins('Dgraph', 'Mutate') ->
    {<<"api.Dgraph">>, <<"Mutate">>};
service_and_rpc_name_to_fqbins('Dgraph', 'Alter') ->
    {<<"api.Dgraph">>, <<"Alter">>};
service_and_rpc_name_to_fqbins('Dgraph',
			       'CommitOrAbort') ->
    {<<"api.Dgraph">>, <<"CommitOrAbort">>};
service_and_rpc_name_to_fqbins('Dgraph',
			       'CheckVersion') ->
    {<<"api.Dgraph">>, <<"CheckVersion">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"api.Request">>) -> 'Request';
fqbin_to_msg_name(<<"api.Response">>) -> 'Response';
fqbin_to_msg_name(<<"api.Assigned">>) -> 'Assigned';
fqbin_to_msg_name(<<"api.Mutation">>) -> 'Mutation';
fqbin_to_msg_name(<<"api.Operation">>) -> 'Operation';
fqbin_to_msg_name(<<"api.Payload">>) -> 'Payload';
fqbin_to_msg_name(<<"api.TxnContext">>) -> 'TxnContext';
fqbin_to_msg_name(<<"api.Check">>) -> 'Check';
fqbin_to_msg_name(<<"api.Version">>) -> 'Version';
fqbin_to_msg_name(<<"api.LinRead">>) -> 'LinRead';
fqbin_to_msg_name(<<"api.Latency">>) -> 'Latency';
fqbin_to_msg_name(<<"api.NQuad">>) -> 'NQuad';
fqbin_to_msg_name(<<"api.Value">>) -> 'Value';
fqbin_to_msg_name(<<"api.Facet">>) -> 'Facet';
fqbin_to_msg_name(<<"api.SchemaNode">>) -> 'SchemaNode';
fqbin_to_msg_name(<<"api.LoginRequest">>) -> 'LoginRequest';
fqbin_to_msg_name(<<"api.Jwt">>) -> 'Jwt';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('Request') -> <<"api.Request">>;
msg_name_to_fqbin('Response') -> <<"api.Response">>;
msg_name_to_fqbin('Assigned') -> <<"api.Assigned">>;
msg_name_to_fqbin('Mutation') -> <<"api.Mutation">>;
msg_name_to_fqbin('Operation') -> <<"api.Operation">>;
msg_name_to_fqbin('Payload') -> <<"api.Payload">>;
msg_name_to_fqbin('TxnContext') -> <<"api.TxnContext">>;
msg_name_to_fqbin('Check') -> <<"api.Check">>;
msg_name_to_fqbin('Version') -> <<"api.Version">>;
msg_name_to_fqbin('LinRead') -> <<"api.LinRead">>;
msg_name_to_fqbin('Latency') -> <<"api.Latency">>;
msg_name_to_fqbin('NQuad') -> <<"api.NQuad">>;
msg_name_to_fqbin('Value') -> <<"api.Value">>;
msg_name_to_fqbin('Facet') -> <<"api.Facet">>;
msg_name_to_fqbin('SchemaNode') -> <<"api.SchemaNode">>;
msg_name_to_fqbin('LoginRequest') -> <<"api.LoginRequest">>;
msg_name_to_fqbin('Jwt') -> <<"api.Jwt">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"api.Operation.DropOp">>) -> 'Operation.DropOp';
fqbin_to_enum_name(<<"api.LinRead.Sequencing">>) -> 'LinRead.Sequencing';
fqbin_to_enum_name(<<"api.Facet.ValType">>) -> 'Facet.ValType';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('Operation.DropOp') -> <<"api.Operation.DropOp">>;
enum_name_to_fqbin('LinRead.Sequencing') -> <<"api.LinRead.Sequencing">>;
enum_name_to_fqbin('Facet.ValType') -> <<"api.Facet.ValType">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> api.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "api.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["api.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["api"].


get_msg_containment("api") ->
    ['Assigned', 'Check', 'Facet', 'Jwt', 'Latency',
     'LinRead', 'LoginRequest', 'Mutation', 'NQuad',
     'Operation', 'Payload', 'Request', 'Response',
     'SchemaNode', 'TxnContext', 'Value', 'Version'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("api") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("api") -> ['Dgraph'];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("api") ->
    [{'Dgraph', 'Login'}, {'Dgraph', 'Query'},
     {'Dgraph', 'Mutate'}, {'Dgraph', 'Alter'},
     {'Dgraph', 'CommitOrAbort'},
     {'Dgraph', 'CheckVersion'}];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("api") ->
    ['Facet.ValType', 'LinRead.Sequencing',
     'Operation.DropOp'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"api.TxnContext">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.Request">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.Payload">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.NQuad">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.LoginRequest">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.LinRead">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.Jwt">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.Facet">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.Assigned">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.Value">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.SchemaNode">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.Response">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.Latency">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.Check">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.Version">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.Operation">>) -> "api";
get_proto_by_msg_name_as_fqbin(<<"api.Mutation">>) -> "api";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"api.Dgraph">>) -> "api";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"api.Operation.DropOp">>) -> "api";
get_proto_by_enum_name_as_fqbin(<<"api.Facet.ValType">>) -> "api";
get_proto_by_enum_name_as_fqbin(<<"api.LinRead.Sequencing">>) -> "api";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.8.0".

gpb_version_as_list() ->
    [4,8,0].
